(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{BzJD:function(e,n,a){"use strict";a.r(n),a.d(n,"_frontmatter",(function(){return i})),a.d(n,"default",(function(){return p}));var t=a("wx14"),o=a("zLVn"),r=(a("q1tI"),a("7ljp")),s=a("013z"),i=(a("qKvR"),{}),c={_frontmatter:i},m=s.a;function p(e){var n=e.components,a=Object(o.a)(e,["components"]);return Object(r.b)(m,Object(t.a)({},c,a,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",null,"Using Reactive Messaging on OpenLiberty"),Object(r.b)("p",null,"Following through the tutorialâ€™s ",Object(r.b)("inlineCode",{parentName:"p"},"start")," path via ",Object(r.b)("em",{parentName:"p"},Object(r.b)("a",Object(t.a)({parentName:"em"},{href:"https://openliberty.io/guides/microprofile-reactive-messaging.html#getting-started"}),"Getting Started")),", you will be directed through all the necessary steps to build the application as expected."),Object(r.b)("p",null,"Contents for the ",Object(r.b)("inlineCode",{parentName:"p"},"system/src/main/resources/META-INF/microprofile-config.properties")," file:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-properties"}),'mp.messaging.connector.liberty-kafka.bootstrap.servers=<your-bootstrap-nodes-property-of-your-IBM-Event-Streams-on-Cloud-instance>\n\nmp.messaging.connector.liberty-kafka.security.protocol=SASL_SSL\nmp.messaging.connector.liberty-kafka.ssl.protocol=TLSv1.2\nmp.messaging.connector.liberty-kafka.sasl.mechanism=PLAIN\nmp.messaging.connector.liberty-kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="token" password="<your-api-key-of-your-IBM-Event-Streams-on-Cloud-instance>";\n\nmp.messaging.outgoing.systemLoad.connector=liberty-kafka\nmp.messaging.outgoing.systemLoad.topic=systemLoadTopic\nmp.messaging.outgoing.systemLoad.key.serializer=org.apache.kafka.common.serialization.StringSerializer\nmp.messaging.outgoing.systemLoad.value.serializer=io.openliberty.guides.models.SystemLoad$SystemLoadSerializer\n')),Object(r.b)("p",null,"Contents for the ",Object(r.b)("inlineCode",{parentName:"p"},"inventory/src/main/resources/META-INF/microprofile-config.properties")," file:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-properties"}),'mp.messaging.connector.liberty-kafka.bootstrap.servers=<your-bootstrap-nodes-property-of-your-IBM-Event-Streams-on-Cloud-instance>\n\nmp.messaging.connector.liberty-kafka.security.protocol=SASL_SSL\nmp.messaging.connector.liberty-kafka.ssl.protocol=TLSv1.2\nmp.messaging.connector.liberty-kafka.sasl.mechanism=PLAIN\nmp.messaging.connector.liberty-kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="token" password="<your-api-key-of-your-IBM-Event-Streams-on-Cloud-instance>";\n\nmp.messaging.incoming.systemLoad.connector=liberty-kafka\nmp.messaging.incoming.systemLoad.topic=systemLoadTopic\nmp.messaging.incoming.systemLoad.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer\nmp.messaging.incoming.systemLoad.value.deserializer=io.openliberty.guides.models.SystemLoad$SystemLoadDeserializer\nmp.messaging.incoming.systemLoad.group.id=system-load-status\n')),Object(r.b)("p",null,"As the tutorial is built to run Kafka and Zookeeper locally in containers as well, you can replace the ",Object(r.b)("inlineCode",{parentName:"p"},"startContainers.sh")," script in the project with the following:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"#!/bin/bash\n\nNETWORK=reactive-app\n\ndocker network create $NETWORK\n\ndocker run -d \\\n  -p 9083:9083 \\\n  --network=$NETWORK \\\n  --name=system \\\n  --rm \\\n  system:1.0-SNAPSHOT &\n\ndocker run -d \\\n  -p 9085:9085 \\\n  --network=$NETWORK \\\n  --name=inventory \\\n  --rm \\\n  inventory:1.0-SNAPSHOT &\n\nwait\n")),Object(r.b)("h2",null,"Using Reactive Messaging with Quarkus"),Object(r.b)("p",null,"Following along with ",Object(r.b)("em",{parentName:"p"},Object(r.b)("a",Object(t.a)({parentName:"em"},{href:"https://quarkus.io/guides/kafka#creating-the-maven-project"}),"Creating the Maven project"))," through the ",Object(r.b)("em",{parentName:"p"},Object(r.b)("a",Object(t.a)({parentName:"em"},{href:"https://quarkus.io/guides/kafka#get-it-running"}),"Get it running"))," section, you will be walked through the necessary steps to create a simple Quarkus-based project that utilizes the Reactive Messaging feature of MicroProfile."),Object(r.b)("p",null,"Your ",Object(r.b)("inlineCode",{parentName:"p"},"application.properties")," file will need to contain the necessary security and credential information to configure the connector correctly:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-properties"}),'mp.messaging.connector.smallrye-kafka.bootstrap.servers=<your-bootstrap-nodes-property-of-your-IBM-Event-Streams-on-Cloud-instance>\n\nmp.messaging.connector.smallrye-kafka.security.protocol=SASL_SSL\nmp.messaging.connector.smallrye-kafka.ssl.protocol=TLSv1.2\nmp.messaging.connector.smallrye-kafka.sasl.mechanism=PLAIN\nmp.messaging.connector.smallrye-kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="token" password="<your-api-key-of-your-IBM-Event-Streams-on-Cloud-instance>";\n\n# Configure the Kafka sink (we write to it)\nmp.messaging.outgoing.generated-price.connector=smallrye-kafka\nmp.messaging.outgoing.generated-price.topic=prices\nmp.messaging.outgoing.generated-price.value.serializer=org.apache.kafka.common.serialization.IntegerSerializer\n\n# Configure the Kafka source (we read from it)\nmp.messaging.incoming.prices.connector=smallrye-kafka\nmp.messaging.incoming.prices.value.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer\n')))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-electives-eda-activities-labs-lab-3-solution-mdx-8ce2ecf017481368a2f6.js.map