{"version":3,"sources":["webpack:///./src/pages/lectures/kube-overview/activities/labs/lab3/index.mdx"],"names":["name","_frontmatter","InlineNotification","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"4LAQsBA,E,4DAFTC,G,UAAe,IAOtBC,GALgBF,EAKmB,qBALX,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,2EAC5B,kBAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,EACF,8BACD,OAAO,YAACI,EAAD,eAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAG5E,iCACA,6HACA,sBACE,kBAAIC,WAAW,MAAf,8DAAmF,0BAAYA,WAAW,MAAvB,QAAnF,iFAAsN,0BAAYA,WAAW,MAAvB,MAAtN,MAEF,8KAA6J,0BAAYA,WAAW,KAAvB,MAA7J,KACA,mFACA,sBACE,kBAAIA,WAAW,MAAf,gCAAqD,0BAAYA,WAAW,MAAvB,iBAArD,KACA,kBAAIA,WAAW,MAAf,OAA4B,0BAAYA,WAAW,MAAvB,iBAA5B,0EAAiK,0BAAYA,WAAW,MAAvB,+BAAjK,KACA,kBAAIA,WAAW,MAAf,OAA4B,0BAAYA,WAAW,MAAvB,iBAA5B,0DAAiJ,0BAAYA,WAAW,MAAvB,eAAjJ,+CAAyP,0BAAYA,WAAW,MAAvB,MAAzP,kCAA2U,0BAAYA,WAAW,MAAvB,QAA3U,4DACA,kBAAIA,WAAW,MAAf,QAA6B,0BAAYA,WAAW,MAAvB,MAA7B,2BAAwG,0BAAYA,WAAW,MAAvB,iBAAxG,MAEF,YAACV,EAAD,CAAoBS,QAAQ,sBAC1B,qBAAG,sBAAQC,WAAW,KAAnB,QAAH,0CAEF,sBACE,kBAAIA,WAAW,MAAf,oEAAyF,0BAAYA,WAAW,MAAvB,mCAAzF,KACA,kBAAIA,WAAW,MAAf,kPAGF,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,wOAcL,2TACA,uEAAsD,0BAAYA,WAAW,KAAvB,gBACtD,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,+MAYL,wDACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,mCAEL,mDAAkC,0BAAYA,WAAW,KAAvB,iBAAlC,+CACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,uHAEL,wIACA,qBAAG,kBAAIA,WAAW,KAAf,4BACH,sBACE,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,yHADQ,qCAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,+GADQ,mBAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,gFADQ,0CAQ1BH,EAAWI,gBAAiB","file":"component---src-pages-lectures-kube-overview-activities-labs-lab-3-index-mdx-b307e75c3856eefc97fa.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`Problem`}</h2>\n    <p>{`This service has already been packaged into a container image, but there is one special requirement:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The legacy app is hard-coded to only serve content on port `}<inlineCode parentName=\"li\">{`8989`}</inlineCode>{`, but the team wants to be able to access the service using the standard port `}<inlineCode parentName=\"li\">{`80`}</inlineCode>{`.`}</li>\n    </ul>\n    <p>{`Your task is to build a Kubernetes pod that runs this legacy container and uses the ambassador design pattern to expose access to the service on port `}<inlineCode parentName=\"p\">{`80`}</inlineCode>{`.`}</p>\n    <p>{`This setup will need to meet the following specifications:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The pod should have the name `}<inlineCode parentName=\"li\">{`vader-service`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`vader-service`}</inlineCode>{` pod should have a container that runs the legacy vader service image: `}<inlineCode parentName=\"li\">{`ibmcase/millennium-falcon:1`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`vader-service`}</inlineCode>{` pod should have an ambassador container that runs the `}<inlineCode parentName=\"li\">{`haproxy:1.7`}</inlineCode>{` image and proxies incoming traffic on port `}<inlineCode parentName=\"li\">{`80`}</inlineCode>{` to the legacy service on port `}<inlineCode parentName=\"li\">{`8989`}</inlineCode>{` (the HAProxy configuration for this is provided below).`}</li>\n      <li parentName=\"ul\">{`Port `}<inlineCode parentName=\"li\">{`80`}</inlineCode>{` should be exposed as a `}<inlineCode parentName=\"li\">{`containerPort`}</inlineCode>{`.`}</li>\n    </ul>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note`}</strong>{`: You do not need to expose port 8989`}</p>\n    </InlineNotification>\n    <ul>\n      <li parentName=\"ul\">{`The HAProxy configuration should be stored in a ConfigMap called `}<inlineCode parentName=\"li\">{`vader-service-ambassador-config`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`The HAProxy config should be provided to the ambassador container using a volume mount that places the data from the ConfigMap in a file at /usr/local/etc/haproxy/haproxy.cfg.\nhaproxy.cfg should contain the following configuration data:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`global\n    daemon\n    maxconn 256\n\ndefaults\n    mode http\n    timeout connect 5000ms\n    timeout client 50000ms\n    timeout server 50000ms\n\nlisten http-in\n    bind *:80\n    server server1 127.0.0.1:8989 maxconn 32\n`}</code></pre>\n    <p>{`Once your pod is up and running, itâ€™s a good idea to test it to make sure you can access the service from within the cluster using port 80. In order to do this, you can create a busybox pod in the cluster, and then run a command to attempt to access the service from within the busybox pod.`}</p>\n    <p>{`Create a descriptor for the busybox pod called `}<inlineCode parentName=\"p\">{`busybox.yml`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1\nkind: Pod\nmetadata:\n  name: busybox\nspec:\n  containers:\n  - name: myapp-container\n    image: radial/busyboxplus:curl\n    command: ['sh', '-c', 'while true; do sleep 3600; done']\n`}</code></pre>\n    <p>{`Create the busybox testing pod.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`kubectl apply -f busybox.yml\n`}</code></pre>\n    <p>{`Use this command to access `}<inlineCode parentName=\"p\">{`vader-service`}</inlineCode>{` using port 80 from within the busybox pod.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`kubectl exec busybox -- curl $(kubectl get pod vader-service -o=custom-columns=IP:.status.podIP --no-headers):80\n`}</code></pre>\n    <p>{`If the service is working, you should get a message that the hyper drive of the millennium falcon needs repair.`}</p>\n    <p><em parentName=\"p\">{`Relevant Documentation:`}</em></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://kubernetes.io/docs/concepts/cluster-administration/logging/#using-a-sidecar-container-with-the-logging-agent\"\n        }}>{`Kubernetes Sidecar Logging Agent`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://kubernetes.io/docs/tasks/access-application-cluster/communicate-containers-same-pod-shared-volume/\"\n        }}>{`Shared Volumes`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://kubernetes.io/blog/2015/06/the-distributed-system-toolkit-patterns/\"\n        }}>{`Distributed System Toolkit Patterns`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}