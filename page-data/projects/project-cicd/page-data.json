{"componentChunkName":"component---src-pages-projects-project-cicd-index-mdx","path":"/projects/project-cicd/","result":{"pageContext":{"frontmatter":{"title":"CICD Project Challenge","description":"CICD Project Challenge"},"relativePagePath":"/projects/project-cicd/index.mdx","titleType":"page","MdxNode":{"id":"02215c8d-3a9e-599e-84c6-d8e36660741c","children":[],"parent":"066809a6-f5f2-5e80-a87c-1ce77b2b496b","internal":{"content":"---\ntitle: CICD Project Challenge\ndescription: CICD Project Challenge\n---\n\n## Challenge\n\nYou are provided with the challenge to implement a demo that shows best practices for DevOps.\nImplement Continous Integration and Continous Deployment for an Application on Kubernetes.\n\n- Git repository with application code and Dockerfile, Developers have access to this git repository\n- Git repository with pipeline manifest files (ie yamls) files, Operators have access to this repository\n- Git repository with application manifest (ie yaml) files, automation only have access to this repository\n\n## Specifications\n\n![overview-diagram](images/tekton-argocd.png)\n\n### Code Git Repository\n- [Git repository with application code](https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-code)\n- Create a new git repository using this repo as [template](https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-code/generate)\n- Use the `Dockerfile` on the root of the repository to build a container image\n\n### Infra Git Repository\n- [Git repository with application manifest](https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-infra)\n- Create a new git repository using this repo as [template](https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-infra/generate)\n- The directory `ocp/yamls` contains the application manifest files\n\n### Pipeline Git Repository\n- Create new repository to store pipeline resources\n- Use the ServiceAccount `pipeline`\n- Use the following guide to create a Pipeline, Tasks, and secret:\n    - Create a pipeline, tasks, secrets on the target namespace\n    - Git clone the source code from the App repo\n    - Build a container image using the `Dockerfile` on the repo\n    - Tag the image using the 7 first characters of the git hash corresponding to last git commit\n    - Push the container image into the internal image registry on the same namespace\n    - Git clone the Infra git repo\n    - Update the image on the deployment yaml with the new image id that has the tag with value of the git commit\n    - Git commit the changes\n    - Git push the changes to the infra git repo, this should trigger argocd to pickup any changes from the infra repo.\n\n## Hints\n- The secret contains the git username and token with permission `repo` that gives write access to the git infra repository\n- OpenShift 4 comes with an internal image registry you can push from a Tekton task\n- The image registry url contains the service name, port, namespace, image name and tag\n    ```\n    image-registry.openshift-image-registry.svc:5000/my-namespace-app/image-name:my-tag\n    ```\n- The image registry only handles ssl/https connections, but it uses a self sign certificate\n- You need to ignore TLS-Verify to be able to succesfully push and ignore ssl errors for example using buildah set the flag `--tls-verify=\"false\"`\n\n## Extra Credit\n\n- Make the pipeline to run automatically every time new code gets pushed to the Code git repository\n  - Configure a Github Webhook using the new [Tekton Triggers](https://github.com/tektoncd/triggers) listener and bindings\n\n## Solution\nHere is one implementation as a [solution](./solution)\n","type":"Mdx","contentDigest":"56c45139dd6c16c89948e57e3cfaf341","counter":576,"owner":"gatsby-plugin-mdx"},"exports":[],"rawBody":"---\ntitle: CICD Project Challenge\ndescription: CICD Project Challenge\n---\n\n## Challenge\n\nYou are provided with the challenge to implement a demo that shows best practices for DevOps.\nImplement Continous Integration and Continous Deployment for an Application on Kubernetes.\n\n- Git repository with application code and Dockerfile, Developers have access to this git repository\n- Git repository with pipeline manifest files (ie yamls) files, Operators have access to this repository\n- Git repository with application manifest (ie yaml) files, automation only have access to this repository\n\n## Specifications\n\n![overview-diagram](images/tekton-argocd.png)\n\n### Code Git Repository\n- [Git repository with application code](https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-code)\n- Create a new git repository using this repo as [template](https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-code/generate)\n- Use the `Dockerfile` on the root of the repository to build a container image\n\n### Infra Git Repository\n- [Git repository with application manifest](https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-infra)\n- Create a new git repository using this repo as [template](https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-infra/generate)\n- The directory `ocp/yamls` contains the application manifest files\n\n### Pipeline Git Repository\n- Create new repository to store pipeline resources\n- Use the ServiceAccount `pipeline`\n- Use the following guide to create a Pipeline, Tasks, and secret:\n    - Create a pipeline, tasks, secrets on the target namespace\n    - Git clone the source code from the App repo\n    - Build a container image using the `Dockerfile` on the repo\n    - Tag the image using the 7 first characters of the git hash corresponding to last git commit\n    - Push the container image into the internal image registry on the same namespace\n    - Git clone the Infra git repo\n    - Update the image on the deployment yaml with the new image id that has the tag with value of the git commit\n    - Git commit the changes\n    - Git push the changes to the infra git repo, this should trigger argocd to pickup any changes from the infra repo.\n\n## Hints\n- The secret contains the git username and token with permission `repo` that gives write access to the git infra repository\n- OpenShift 4 comes with an internal image registry you can push from a Tekton task\n- The image registry url contains the service name, port, namespace, image name and tag\n    ```\n    image-registry.openshift-image-registry.svc:5000/my-namespace-app/image-name:my-tag\n    ```\n- The image registry only handles ssl/https connections, but it uses a self sign certificate\n- You need to ignore TLS-Verify to be able to succesfully push and ignore ssl errors for example using buildah set the flag `--tls-verify=\"false\"`\n\n## Extra Credit\n\n- Make the pipeline to run automatically every time new code gets pushed to the Code git repository\n  - Configure a Github Webhook using the new [Tekton Triggers](https://github.com/tektoncd/triggers) listener and bindings\n\n## Solution\nHere is one implementation as a [solution](./solution)\n","frontmatter":{"title":"CICD Project Challenge","description":"CICD Project Challenge"},"fileAbsolutePath":"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/src/pages/projects/project-cicd/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550"]}