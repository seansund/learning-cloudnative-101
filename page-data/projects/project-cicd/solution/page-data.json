{"componentChunkName":"component---src-pages-projects-project-cicd-solution-mdx","path":"/projects/project-cicd/solution/","result":{"pageContext":{"frontmatter":{"title":"CICD Project Solution","description":"CICD Project Solution"},"relativePagePath":"/projects/project-cicd/solution.mdx","titleType":"page","MdxNode":{"id":"9aad3a4e-0c03-5256-990a-b21d0e8e47bc","children":[],"parent":"0b5101c5-8706-5764-b5e1-16c5fa6572ff","internal":{"content":"---\ntitle: CICD Project Solution\ndescription: CICD Project Solution\n---\n\n## Tekton and ArgoCD Integration\n\nThis tutorial shows the concept of seperation of concerns in DevOps.\nThe project is setup in 3 repos (not all teams will have write access to all of them)\n- This git repo only contains the pipeline setup\n  - https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-pipeline\n- The git repo that contains only the application source code\n  - https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-code\n- The git repo that contains only the infrastructure manifests (yaml)\n  - https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-infra\n\n- We will be using Tekton to build the container image, and update the Infra Git repo.\n- We will be using ArgoCD to deploy the application from the infra git repo\n\n![overview-diagram](./images/tekton-argocd.png)\n\n## Setup Git repositories\n- Get a copy of the devops git repository and change directory\n  ```bash\n  git clone https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-pipeline\n  cd tutorial-tekton-argocd-pipeline\n  ```\n- Create a new code git repository using this repo as [template](https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-code/generate)\n- Create a new infra git repository using this repo as [template](https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-infra/generate)\n\n## Setup Cluster\n- You need an OpenShift 4 cluster, you can use [CodeReadyContainers (CRC)](https://access.redhat.com/documentation/en-us/red_hat_codeready_containers), [OpenShift PlayGround](https://learn.openshift.com/playgrounds/openshift42/), or OpenShift from a cloud provider like IBM Cloud\n- Install OpenShift Operators\n  - Install OpenShift Pipeline Operator\n    ```bash\n    oc apply -f operators/tekton-operator.yaml\n    ```\n  - Install [ArgoCD (HELM) Operator](https://github.com/disposab1e/argocd-operator-helm) on the `argocd` namespace\n    ```bash\n    oc apply -f operators/argocd-operator.yaml\n    ```\n    When installing the tutorial, make sure you wait until the argocd-operator is finished before installing the argocd-cr..or it will fail. You can do this:\n    ```bash\n    oc get ClusterServiceVersion -n argocd\n    NAME                                   DISPLAY                        VERSION   REPLACES   PHASE\n    argocd-operator.v0.0.8                 Argo CD                        0.0.8                Succeeded\n    ```\n    and wait for the \"succeeded\" to come up before proceeding.\n    ```bash\n    oc apply -f operators/argocd-cr.yaml\n    ```\n    and wait for the argocd server Pod to be running\n    ```\n    oc get pods -n argocd -l app.kubernetes.io/name=example-argocd-server\n    ```\n    ```\n    NAME                                     READY   STATUS    RESTARTS   AGE\n    example-argocd-server-57c4fd5c45-zf4q6   1/1     Running   0          115s\n    ```\n\n\n## Setup CLIs\n- [Install Tekton CLI](https://github.com/tektoncd/cli#installing-tkn) `tkn`\n- [Install ArgoCD CLI](https://argoproj.github.io/argo-cd/cli_installation/) `argocd`\n\n## Setup target Namespace\n- Create a new namespace/project\n  ```bash\n  oc new-project tekton-argocd\n  ```\n- Set the environment variable `NAMESPACE`\n  ```bash\n  export NAMESPACE=$(oc project -q)\n  echo \"NAMESPACE set to $NAMESPACE\"\n  ```\n\n## Create ArgoCD Application\n\n- Set an environment variable `ARGOCD_URL` using the route\n    ```bash\n    export ARGOCD_NAMESPACE=\"argocd\"\n    export ARGOCD_SERVER=$(oc get route example-argocd-server -n $ARGOCD_NAMESPACE -o jsonpath='{.spec.host}')\n    export ARGOCD_URL=\"https://$ARGOCD_SERVER\"\n    echo ARGOCD_URL=$ARGOCD_URL\n    echo ARGOCD_SERVER=$ARGOCD_SERVER\n    ```\n- Login into the UI.\n    ```bash\n    open $ARGOCD_URL\n    ```\n- Use `admin` as the username and get the password with the following command\n    ```bash\n    oc get secret example-argocd-cluster -n $ARGOCD_NAMESPACE -o jsonpath='{.data.admin\\.password}' | base64 -d\n    ```\n    For example the output is similar to this:\n    ```\n    tyafMb7BNvO0kP9eizx3CojrK8pYJFQq\n    ```\n    ```bash\n    export ARGOCD_PASSWORD=$(oc get secret example-argocd-cluster -n $ARGOCD_NAMESPACE -o jsonpath='{.data.admin\\.password}' | base64 -d)\n    ```\n\n- Login into ArgoCD\n  ```bash\n  argocd login --username admin --password $ARGOCD_PASSWORD $ARGOCD_SERVER\n  ```\n  Note: if you have problems with DNS using CRC, you might need to edit `/etc/hosts` and add entry for the `$ARGOCD_SERVER` with IP Address from `crc ip`\n\n- Create the App in ArgoCD using your own Infra git repository\n  ```bash\n  export GIT_REPOSITORY_URL=\"https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-infra\"\n  ```\n  ```bash\n  export ARGOCD_APP=$(oc project -q)\n  export GIT_MANIFEST_DIR=\"yamls/ocp\"\n  ```\n  ```bash\n  argocd app create $ARGOCD_APP \\\n  --project default \\\n  --repo $GIT_REPOSITORY_URL \\\n  --path $GIT_MANIFEST_DIR \\\n  --dest-server https://kubernetes.default.svc \\\n  --dest-namespace $NAMESPACE \\\n  --sync-policy automated \\\n  --self-heal \\\n  --auto-prune\n  ```\n\n  ```\n  application 'tekton-argocd' created\n  ```\n\n## Build Image with Tekton\n\n\n- Deploy the pipeline assets, edit the `pipelines/git.yaml` and `pipelines/pipeline-build-git.yaml` and use your own Code and Infra git repositories respectively.\n  ```bash\n  oc apply -f pipeline/ -n $NAMESPACE\n  ```\n\n  ```bash\n  tkn resources ls -n $NAMESPACE\n  ```\n  ```\n  NAME     TYPE    DETAILS\n  source   git     url: https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-code\n  image    image   url: image-registry.openshift-image-registry.svc:5000/$NAMESPACE/app\n  ```\n\n  ```bash\n  tkn task ls -n $NAMESPACE\n  ```\n  ```\n  NAME        AGE\n  build       36 seconds ago\n  build-git   36 seconds ago\n  ```\n\n  ```bash\n  tkn pipeline ls -n $NAMESPACE\n  ```\n  ```\n  NAME        AGE              LAST RUN   STARTED   DURATION   STATUS\n  build-git   17 seconds ago   ---        ---       ---        ---\n  ```\n\n- Run the build task to test image build only\n  ```bash\n  tkn task start build \\\n    -i image=image \\\n    -i source=source \\\n    --showlog \\\n    -s pipeline \\\n    -n $NAMESPACE\n  ```\n\n  ```bash\n  tkn taskrun ls -n $NAMESPACE\n  ```\n  ```\n  NAME              STARTED         DURATION    STATUS\n  build-run-c4d4r   4 minutes ago   2 minutes   Succeeded\n  ```\n\n  ```bash\n  oc get imagestream -n $NAMESPACE\n  ```\n  ```\n  NAME   IMAGE REPOSITORY                                                     TAGS      UPDATED\n  app    image-registry.openshift-image-registry.svc:5000/tekton-argocd/app   b711ac7   About a minute ago\n  ```\n\n## Update Infrastructure Git repo\n\n### Configure Github Personal Access Token\n\n- For your CI pipeline to connect to and use your GitHub repo, it will need a [GitHub personal access token](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line) with `public_repo` and `write:repo_hook` scopes.\n- Navigate to [Developer Settings](https://github.com/settings/tokens) and generate a new token; name it something like \"CI pipeline\"\n- Select `public_repo` scope to enable git clone\n- Select `write:repo_hook` scope so the pipeline can create a web hook\n- The GitHub UI will never again let you see this token, so be sure to **save the token** in your password manager or somewhere safe that you can access later on\n- Create the secret for the Infra repository, replace `<GIT_USERNAME>` and `<GIT_TOKEN>`, keep the quotes\n    ```bash\n    export GIT_USERNAME='<GIT_USERNAME>'\n    export GIT_TOKEN='<GIT_TOKEN>'\n    ```\n    ```bash\n    oc create secret generic git-infra-secret \\\n      --from-literal=username=\"$GIT_USERNAME\" \\\n      --from-literal=token=\"$GIT_TOKEN\" \\\n      -n $NAMESPACE\n    ```\n\n- Run Pipeline to Build Image and Update Infra Git repo\n  ```bash\n  tkn pipeline start build-git \\\n              --showlog \\\n              -r source=source \\\n              -r image=image \\\n              -s pipeline \\\n              -n $NAMESPACE\n  ```\n\n  ```bash\n  tkn pipeline ls -n $NAMESPACE\n  ```\n  ```\n  NAME        AGE             LAST RUN              STARTED         DURATION   STATUS\n  build-git   2 minutes ago   build-git-run-rdhmj   2 minutes ago   1 minute   Succeeded\n  ```\n\n## Extra Credit: Create Git Webhook\n\n- This is only possible if your OpenShift cluster is accessible from the the github server (ie github.com)\n- Create a WebHook for the Code Git repo\n  ```bash\n  oc apply -f triggers/ -n $NAMESPACE\n  ```\n\n  ```bash\n  oc create route edge --service=el-cicd -n $NAMESPACE\n  ```\n\n  ```bash\n  export GIT_WEBHOOK_URL=$(oc get route el-cicd -o jsonpath='{.spec.host}' -n $NAMESPACE)\n  echo \"https://$GIT_WEBHOOK_URL\"\n  ```\n\n- Set the `GIT_REPO_NAME` to name of the Code Git repo like `tutorial-tekton-argocd-code`\n  ```bash\n  export GIT_REPO_NAME='<GIT_REPO_NAME>'\n  ```\n\n- Set the `GIT_REPO_OWNER` to name of the Code Git repo like `ibm-cloud-architecture`\n  ```bash\n  export GIT_REPO_OWNER='<GIT_REPO_OWNER>'\n  ```\n\n- Run curl to create the web hook\n  ```bash\n  curl -v -X POST -u $GIT_USERNAME:$GIT_TOKEN \\\n  -d \"{\\\"name\\\": \\\"web\\\",\\\"active\\\": true,\\\"events\\\": [\\\"push\\\"],\\\"config\\\": {\\\"url\\\": \\\"https://$GIT_WEBHOOK_URL\\\",\\\"content_type\\\": \\\"json\\\",\\\"insecure_ssl\\\": \\\"0\\\"}}\" \\\n  -L https://api.github.com/repos/$GIT_REPO_OWNER/$GIT_REPO_NAME/hooks\n  ```\n\nMake a change on the Code repository, and verify that Github sent the WebHook to the event listener, and that the Pipeline runs in OpenShift Console\n\n","type":"Mdx","contentDigest":"df2b9b2c754173056e97db292b40cf8b","counter":578,"owner":"gatsby-plugin-mdx"},"exports":[],"rawBody":"---\ntitle: CICD Project Solution\ndescription: CICD Project Solution\n---\n\n## Tekton and ArgoCD Integration\n\nThis tutorial shows the concept of seperation of concerns in DevOps.\nThe project is setup in 3 repos (not all teams will have write access to all of them)\n- This git repo only contains the pipeline setup\n  - https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-pipeline\n- The git repo that contains only the application source code\n  - https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-code\n- The git repo that contains only the infrastructure manifests (yaml)\n  - https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-infra\n\n- We will be using Tekton to build the container image, and update the Infra Git repo.\n- We will be using ArgoCD to deploy the application from the infra git repo\n\n![overview-diagram](./images/tekton-argocd.png)\n\n## Setup Git repositories\n- Get a copy of the devops git repository and change directory\n  ```bash\n  git clone https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-pipeline\n  cd tutorial-tekton-argocd-pipeline\n  ```\n- Create a new code git repository using this repo as [template](https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-code/generate)\n- Create a new infra git repository using this repo as [template](https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-infra/generate)\n\n## Setup Cluster\n- You need an OpenShift 4 cluster, you can use [CodeReadyContainers (CRC)](https://access.redhat.com/documentation/en-us/red_hat_codeready_containers), [OpenShift PlayGround](https://learn.openshift.com/playgrounds/openshift42/), or OpenShift from a cloud provider like IBM Cloud\n- Install OpenShift Operators\n  - Install OpenShift Pipeline Operator\n    ```bash\n    oc apply -f operators/tekton-operator.yaml\n    ```\n  - Install [ArgoCD (HELM) Operator](https://github.com/disposab1e/argocd-operator-helm) on the `argocd` namespace\n    ```bash\n    oc apply -f operators/argocd-operator.yaml\n    ```\n    When installing the tutorial, make sure you wait until the argocd-operator is finished before installing the argocd-cr..or it will fail. You can do this:\n    ```bash\n    oc get ClusterServiceVersion -n argocd\n    NAME                                   DISPLAY                        VERSION   REPLACES   PHASE\n    argocd-operator.v0.0.8                 Argo CD                        0.0.8                Succeeded\n    ```\n    and wait for the \"succeeded\" to come up before proceeding.\n    ```bash\n    oc apply -f operators/argocd-cr.yaml\n    ```\n    and wait for the argocd server Pod to be running\n    ```\n    oc get pods -n argocd -l app.kubernetes.io/name=example-argocd-server\n    ```\n    ```\n    NAME                                     READY   STATUS    RESTARTS   AGE\n    example-argocd-server-57c4fd5c45-zf4q6   1/1     Running   0          115s\n    ```\n\n\n## Setup CLIs\n- [Install Tekton CLI](https://github.com/tektoncd/cli#installing-tkn) `tkn`\n- [Install ArgoCD CLI](https://argoproj.github.io/argo-cd/cli_installation/) `argocd`\n\n## Setup target Namespace\n- Create a new namespace/project\n  ```bash\n  oc new-project tekton-argocd\n  ```\n- Set the environment variable `NAMESPACE`\n  ```bash\n  export NAMESPACE=$(oc project -q)\n  echo \"NAMESPACE set to $NAMESPACE\"\n  ```\n\n## Create ArgoCD Application\n\n- Set an environment variable `ARGOCD_URL` using the route\n    ```bash\n    export ARGOCD_NAMESPACE=\"argocd\"\n    export ARGOCD_SERVER=$(oc get route example-argocd-server -n $ARGOCD_NAMESPACE -o jsonpath='{.spec.host}')\n    export ARGOCD_URL=\"https://$ARGOCD_SERVER\"\n    echo ARGOCD_URL=$ARGOCD_URL\n    echo ARGOCD_SERVER=$ARGOCD_SERVER\n    ```\n- Login into the UI.\n    ```bash\n    open $ARGOCD_URL\n    ```\n- Use `admin` as the username and get the password with the following command\n    ```bash\n    oc get secret example-argocd-cluster -n $ARGOCD_NAMESPACE -o jsonpath='{.data.admin\\.password}' | base64 -d\n    ```\n    For example the output is similar to this:\n    ```\n    tyafMb7BNvO0kP9eizx3CojrK8pYJFQq\n    ```\n    ```bash\n    export ARGOCD_PASSWORD=$(oc get secret example-argocd-cluster -n $ARGOCD_NAMESPACE -o jsonpath='{.data.admin\\.password}' | base64 -d)\n    ```\n\n- Login into ArgoCD\n  ```bash\n  argocd login --username admin --password $ARGOCD_PASSWORD $ARGOCD_SERVER\n  ```\n  Note: if you have problems with DNS using CRC, you might need to edit `/etc/hosts` and add entry for the `$ARGOCD_SERVER` with IP Address from `crc ip`\n\n- Create the App in ArgoCD using your own Infra git repository\n  ```bash\n  export GIT_REPOSITORY_URL=\"https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-infra\"\n  ```\n  ```bash\n  export ARGOCD_APP=$(oc project -q)\n  export GIT_MANIFEST_DIR=\"yamls/ocp\"\n  ```\n  ```bash\n  argocd app create $ARGOCD_APP \\\n  --project default \\\n  --repo $GIT_REPOSITORY_URL \\\n  --path $GIT_MANIFEST_DIR \\\n  --dest-server https://kubernetes.default.svc \\\n  --dest-namespace $NAMESPACE \\\n  --sync-policy automated \\\n  --self-heal \\\n  --auto-prune\n  ```\n\n  ```\n  application 'tekton-argocd' created\n  ```\n\n## Build Image with Tekton\n\n\n- Deploy the pipeline assets, edit the `pipelines/git.yaml` and `pipelines/pipeline-build-git.yaml` and use your own Code and Infra git repositories respectively.\n  ```bash\n  oc apply -f pipeline/ -n $NAMESPACE\n  ```\n\n  ```bash\n  tkn resources ls -n $NAMESPACE\n  ```\n  ```\n  NAME     TYPE    DETAILS\n  source   git     url: https://github.com/ibm-cloud-architecture/tutorial-tekton-argocd-code\n  image    image   url: image-registry.openshift-image-registry.svc:5000/$NAMESPACE/app\n  ```\n\n  ```bash\n  tkn task ls -n $NAMESPACE\n  ```\n  ```\n  NAME        AGE\n  build       36 seconds ago\n  build-git   36 seconds ago\n  ```\n\n  ```bash\n  tkn pipeline ls -n $NAMESPACE\n  ```\n  ```\n  NAME        AGE              LAST RUN   STARTED   DURATION   STATUS\n  build-git   17 seconds ago   ---        ---       ---        ---\n  ```\n\n- Run the build task to test image build only\n  ```bash\n  tkn task start build \\\n    -i image=image \\\n    -i source=source \\\n    --showlog \\\n    -s pipeline \\\n    -n $NAMESPACE\n  ```\n\n  ```bash\n  tkn taskrun ls -n $NAMESPACE\n  ```\n  ```\n  NAME              STARTED         DURATION    STATUS\n  build-run-c4d4r   4 minutes ago   2 minutes   Succeeded\n  ```\n\n  ```bash\n  oc get imagestream -n $NAMESPACE\n  ```\n  ```\n  NAME   IMAGE REPOSITORY                                                     TAGS      UPDATED\n  app    image-registry.openshift-image-registry.svc:5000/tekton-argocd/app   b711ac7   About a minute ago\n  ```\n\n## Update Infrastructure Git repo\n\n### Configure Github Personal Access Token\n\n- For your CI pipeline to connect to and use your GitHub repo, it will need a [GitHub personal access token](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line) with `public_repo` and `write:repo_hook` scopes.\n- Navigate to [Developer Settings](https://github.com/settings/tokens) and generate a new token; name it something like \"CI pipeline\"\n- Select `public_repo` scope to enable git clone\n- Select `write:repo_hook` scope so the pipeline can create a web hook\n- The GitHub UI will never again let you see this token, so be sure to **save the token** in your password manager or somewhere safe that you can access later on\n- Create the secret for the Infra repository, replace `<GIT_USERNAME>` and `<GIT_TOKEN>`, keep the quotes\n    ```bash\n    export GIT_USERNAME='<GIT_USERNAME>'\n    export GIT_TOKEN='<GIT_TOKEN>'\n    ```\n    ```bash\n    oc create secret generic git-infra-secret \\\n      --from-literal=username=\"$GIT_USERNAME\" \\\n      --from-literal=token=\"$GIT_TOKEN\" \\\n      -n $NAMESPACE\n    ```\n\n- Run Pipeline to Build Image and Update Infra Git repo\n  ```bash\n  tkn pipeline start build-git \\\n              --showlog \\\n              -r source=source \\\n              -r image=image \\\n              -s pipeline \\\n              -n $NAMESPACE\n  ```\n\n  ```bash\n  tkn pipeline ls -n $NAMESPACE\n  ```\n  ```\n  NAME        AGE             LAST RUN              STARTED         DURATION   STATUS\n  build-git   2 minutes ago   build-git-run-rdhmj   2 minutes ago   1 minute   Succeeded\n  ```\n\n## Extra Credit: Create Git Webhook\n\n- This is only possible if your OpenShift cluster is accessible from the the github server (ie github.com)\n- Create a WebHook for the Code Git repo\n  ```bash\n  oc apply -f triggers/ -n $NAMESPACE\n  ```\n\n  ```bash\n  oc create route edge --service=el-cicd -n $NAMESPACE\n  ```\n\n  ```bash\n  export GIT_WEBHOOK_URL=$(oc get route el-cicd -o jsonpath='{.spec.host}' -n $NAMESPACE)\n  echo \"https://$GIT_WEBHOOK_URL\"\n  ```\n\n- Set the `GIT_REPO_NAME` to name of the Code Git repo like `tutorial-tekton-argocd-code`\n  ```bash\n  export GIT_REPO_NAME='<GIT_REPO_NAME>'\n  ```\n\n- Set the `GIT_REPO_OWNER` to name of the Code Git repo like `ibm-cloud-architecture`\n  ```bash\n  export GIT_REPO_OWNER='<GIT_REPO_OWNER>'\n  ```\n\n- Run curl to create the web hook\n  ```bash\n  curl -v -X POST -u $GIT_USERNAME:$GIT_TOKEN \\\n  -d \"{\\\"name\\\": \\\"web\\\",\\\"active\\\": true,\\\"events\\\": [\\\"push\\\"],\\\"config\\\": {\\\"url\\\": \\\"https://$GIT_WEBHOOK_URL\\\",\\\"content_type\\\": \\\"json\\\",\\\"insecure_ssl\\\": \\\"0\\\"}}\" \\\n  -L https://api.github.com/repos/$GIT_REPO_OWNER/$GIT_REPO_NAME/hooks\n  ```\n\nMake a change on the Code repository, and verify that Github sent the WebHook to the event listener, and that the Pipeline runs in OpenShift Console\n\n","frontmatter":{"title":"CICD Project Solution","description":"CICD Project Solution"},"fileAbsolutePath":"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/src/pages/projects/project-cicd/solution.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550"]}