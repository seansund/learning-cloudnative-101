{"componentChunkName":"component---src-pages-electives-api-connect-activities-creating-ap-is-mdx","path":"/electives/api-connect/activities/creatingAPIs/","result":{"pageContext":{"frontmatter":{"title":"Creating APIs"},"relativePagePath":"/electives/api-connect/activities/creatingAPIs.mdx","titleType":"page","MdxNode":{"id":"e2377c31-b5eb-5df3-b046-8067f9afd0c2","children":[],"parent":"424ba562-ea11-55b9-97bd-ce12272265c5","internal":{"content":"---\ntitle: Creating APIs\n---\n\nTo setup API Connect follow the instructions for [API Connect Access](./accessAPI).\n\n## Create a New Catalog \n\n- Once logged in, we will be on the API Connect Dashboard.\n\n![apidashboard](../images/apiconnect-dash.png)\n\n- Click the `Add` button in the upper left corner and select `Catalog`.\n\n- Name your catalog whatever you like, in this case we are using `Dev`.\n\n![apidev](../images/apiconnect-dev.png)\n\n- We will be using this catalog for all of our tutorials.\n\n## Create a New Product\n\n- Start by clicking on your catalog name from the main dashboard.\n\n- Click on the top left arrows button next to the catalog name.\n\n![product](../images/apiconnect-product.png)\n\n- Next, Select `Drafts`.\n\n![drafts](../images/apiconnect-drafts.png)\n\n- On the `Drafts` page, click on the `Add` button in the top left side. Then click `New Product`.\n\n![newproduct](../images/apinewproduct.png)\n\n- Fill in the `Product` info with the following:\n    - Title: `Development`\n    - Name: `Test`\n    - Version: `1.0.0`\n\n![apidev](../images/product-details.png)\n\n- Now a new Product named `Test` has been created. On the `Design` page all the details about the product can be changed.\n\n## Create a New API\n\n- With a product created, now we can create a new API for that product.\n\n- Navigate back to the `Drafts` page.\n\n- Click on the top left arrows button next to the catalog name.\n\n![product](../images/apiconnect-product.png)\n\n- Next, Select `Drafts`.\n\n![drafts](../images/apiconnect-drafts.png)\n\n- Once on the `Drafts` page, Click on the `API's` tab in the top left.\n\n![drafts](../images/draft-apis.png)\n\n- Click `Add` -> `New API` \n\n- Fill in the `API` info with the following:\n    - Title: `nodejs-test`\n    - Name: `nodejs-test`\n    - Base Path: `/v1`\n    - Version : `1.0.0`\n    Additional Properties\n    - API Template: `Default`\n    - Security: `None`\n    - Enabled CORS: `Checked`\n    - Gateway: `Micro and DataPower Gateways`\n\n- Click `Create API` and you will be on the API `Design` screen.\n\n![api](../images/new-api.png)\n\n- On the Left side of the design page, you will see all the attributes for your new API.\n\n- Next, Click on `Paths` on the left side. There will not be any paths defined yet.\n\n![paths](../images/paths.png)\n\n- There are 2 paths that we need to define for our application. Add each using the + on the right side of the `paths` section.\n\n![paths](../images/paths-add.png)\n\n- The paths we need to define are the following:\n    - `/students`\n    - `/testers`\n\n- With each new `path` you will get a box with 3 options. `Path`, `Parameters`, and `Operations`.\n\n- For this tutorial we only need to modify the `Path` section.\n\n<InlineNotification>\n\n** Note: ** Each new path automatically creates a `GET` method, that can be modified if needed based on the endpoint.\n\n</InlineNotification>\n\n![details](../images/path-details.png)\n\n- Now that we have the `Paths` created we can move to the `Assemble` page.\n\n![assemble](../images/assemble.png)\n\n- On the `Assemble` page, everything is drag and drop. Let's start by dragging and dropping an `Operation-Switch` in front of the `invoke` node.\n\n![operation](../images/operation-switch.png)\n\n- This will put the `invoke` statement in the `operation-switch`.\n\n- We need to create an `invoke` statement for each `Path` we created before.\n\n![invoke](../images/invokes.png)\n\n- Once the `invokes` are created, Click on the operation-switch to see the `cases` for each of the invoke statements.\n\n- Make 2 cases for each of the endpoints as seen below.\n\n![switch](../images/switch.png)\n\n- Now, Click on the first `invoke` statement and the details for the `invoke` will appear on the right side.\n\n![invoke-details](../images/invoke-details.png)\n\n- Let's name each `invoke` after the name of the `path` and we need to modify the `URL` for each as well.\n\n- For each `URL` use `http://173.193.79.56:32765/` plus the `Path`. So for `/students` it would be:\n    - Title: `/students`\n    - Description: `Students endpoint`\n    - URL: `http://173.193.79.56:32765/students`\n\n![invoke-stu](../images/invoke-stu.png)\n\n- Repeat that process for `/` and `/testers`. Once finished, Save your changes by hitting the floppy disk icon in the top left corner.\n\n![save](../images/floppy.png)\n\n- This will save all your changes. Now we can test it.\n\n## Testing the API\n\n- To test the API, Click on the `Test` button next to the search bar. (Looks like a play button)\n\n![save](../images/test.png)\n\n- This will pop up the `Setup` screen on the left side.\n\n- You will see the `Catalog` which is `Dev`. Then the `Product` section. Click the drop-down for `Product` and select your `Product`.\n\n- The API is not currently in the product, so we need to add it by clicking the `Add API` button.\n\n![add](../images/add-api.png)\n\n- The API is now added to the `Product` and we need to Republish the Product by clicking `Republish product`.\n\n- Now we can choose an `Operation` to invoke. For the first one we will pick `/students`.\n\n![students](../images/operation-students.png)\n\n- With the operation chosen we can add any parameters the API would need, but in this case we don't need any so we can just press `Invoke`.\n\n- If everything is successful we will see response with a status of `200` and a JSON object like the one below. \n\n![add](../images/success.png)\n\n- That's it. We have successfully built an API. Try out the other operations as well.","type":"Mdx","contentDigest":"f20c25b7719213807af59f01122040bb","counter":581,"owner":"gatsby-plugin-mdx"},"exports":[],"rawBody":"---\ntitle: Creating APIs\n---\n\nTo setup API Connect follow the instructions for [API Connect Access](./accessAPI).\n\n## Create a New Catalog \n\n- Once logged in, we will be on the API Connect Dashboard.\n\n![apidashboard](../images/apiconnect-dash.png)\n\n- Click the `Add` button in the upper left corner and select `Catalog`.\n\n- Name your catalog whatever you like, in this case we are using `Dev`.\n\n![apidev](../images/apiconnect-dev.png)\n\n- We will be using this catalog for all of our tutorials.\n\n## Create a New Product\n\n- Start by clicking on your catalog name from the main dashboard.\n\n- Click on the top left arrows button next to the catalog name.\n\n![product](../images/apiconnect-product.png)\n\n- Next, Select `Drafts`.\n\n![drafts](../images/apiconnect-drafts.png)\n\n- On the `Drafts` page, click on the `Add` button in the top left side. Then click `New Product`.\n\n![newproduct](../images/apinewproduct.png)\n\n- Fill in the `Product` info with the following:\n    - Title: `Development`\n    - Name: `Test`\n    - Version: `1.0.0`\n\n![apidev](../images/product-details.png)\n\n- Now a new Product named `Test` has been created. On the `Design` page all the details about the product can be changed.\n\n## Create a New API\n\n- With a product created, now we can create a new API for that product.\n\n- Navigate back to the `Drafts` page.\n\n- Click on the top left arrows button next to the catalog name.\n\n![product](../images/apiconnect-product.png)\n\n- Next, Select `Drafts`.\n\n![drafts](../images/apiconnect-drafts.png)\n\n- Once on the `Drafts` page, Click on the `API's` tab in the top left.\n\n![drafts](../images/draft-apis.png)\n\n- Click `Add` -> `New API` \n\n- Fill in the `API` info with the following:\n    - Title: `nodejs-test`\n    - Name: `nodejs-test`\n    - Base Path: `/v1`\n    - Version : `1.0.0`\n    Additional Properties\n    - API Template: `Default`\n    - Security: `None`\n    - Enabled CORS: `Checked`\n    - Gateway: `Micro and DataPower Gateways`\n\n- Click `Create API` and you will be on the API `Design` screen.\n\n![api](../images/new-api.png)\n\n- On the Left side of the design page, you will see all the attributes for your new API.\n\n- Next, Click on `Paths` on the left side. There will not be any paths defined yet.\n\n![paths](../images/paths.png)\n\n- There are 2 paths that we need to define for our application. Add each using the + on the right side of the `paths` section.\n\n![paths](../images/paths-add.png)\n\n- The paths we need to define are the following:\n    - `/students`\n    - `/testers`\n\n- With each new `path` you will get a box with 3 options. `Path`, `Parameters`, and `Operations`.\n\n- For this tutorial we only need to modify the `Path` section.\n\n<InlineNotification>\n\n** Note: ** Each new path automatically creates a `GET` method, that can be modified if needed based on the endpoint.\n\n</InlineNotification>\n\n![details](../images/path-details.png)\n\n- Now that we have the `Paths` created we can move to the `Assemble` page.\n\n![assemble](../images/assemble.png)\n\n- On the `Assemble` page, everything is drag and drop. Let's start by dragging and dropping an `Operation-Switch` in front of the `invoke` node.\n\n![operation](../images/operation-switch.png)\n\n- This will put the `invoke` statement in the `operation-switch`.\n\n- We need to create an `invoke` statement for each `Path` we created before.\n\n![invoke](../images/invokes.png)\n\n- Once the `invokes` are created, Click on the operation-switch to see the `cases` for each of the invoke statements.\n\n- Make 2 cases for each of the endpoints as seen below.\n\n![switch](../images/switch.png)\n\n- Now, Click on the first `invoke` statement and the details for the `invoke` will appear on the right side.\n\n![invoke-details](../images/invoke-details.png)\n\n- Let's name each `invoke` after the name of the `path` and we need to modify the `URL` for each as well.\n\n- For each `URL` use `http://173.193.79.56:32765/` plus the `Path`. So for `/students` it would be:\n    - Title: `/students`\n    - Description: `Students endpoint`\n    - URL: `http://173.193.79.56:32765/students`\n\n![invoke-stu](../images/invoke-stu.png)\n\n- Repeat that process for `/` and `/testers`. Once finished, Save your changes by hitting the floppy disk icon in the top left corner.\n\n![save](../images/floppy.png)\n\n- This will save all your changes. Now we can test it.\n\n## Testing the API\n\n- To test the API, Click on the `Test` button next to the search bar. (Looks like a play button)\n\n![save](../images/test.png)\n\n- This will pop up the `Setup` screen on the left side.\n\n- You will see the `Catalog` which is `Dev`. Then the `Product` section. Click the drop-down for `Product` and select your `Product`.\n\n- The API is not currently in the product, so we need to add it by clicking the `Add API` button.\n\n![add](../images/add-api.png)\n\n- The API is now added to the `Product` and we need to Republish the Product by clicking `Republish product`.\n\n- Now we can choose an `Operation` to invoke. For the first one we will pick `/students`.\n\n![students](../images/operation-students.png)\n\n- With the operation chosen we can add any parameters the API would need, but in this case we don't need any so we can just press `Invoke`.\n\n- If everything is successful we will see response with a status of `200` and a JSON object like the one below. \n\n![add](../images/success.png)\n\n- That's it. We have successfully built an API. Try out the other operations as well.","frontmatter":{"title":"Creating APIs"},"fileAbsolutePath":"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/src/pages/electives/api-connect/activities/creatingAPIs.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550"]}