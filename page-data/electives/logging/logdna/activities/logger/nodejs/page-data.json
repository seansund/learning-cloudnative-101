{"componentChunkName":"component---src-pages-electives-logging-logdna-activities-logger-nodejs-mdx","path":"/electives/logging/logdna/activities/logger/nodejs/","result":{"pageContext":{"frontmatter":{"title":"Integrate logging in Node.js","description":"Lab to show how to use logging library in Node.js"},"relativePagePath":"/electives/logging/logdna/activities/logger/nodejs.mdx","titleType":"page","MdxNode":{"id":"b820e0be-f974-51f5-ba7c-79fdff87f5a2","children":[],"parent":"1cef02be-ae2b-5a6a-b5e7-7ecdacca9b90","internal":{"content":"---\ntitle: Integrate logging in Node.js\ndescription: Lab to show how to use logging library in Node.js\n---\n\n### Prerequisite\n- Configure the LogDNA Agent on a kubernetes cluster, you can use one of the labs in this bootcamp located [here](/monitoring/logdna/#activities)\n\n\n## Logging library in Node.js\n\n- There are multiple logging libraries available for Node.js, on this example we are going to use [pino](https://www.npmjs.com/package/pino)\n\n- You can instrument a Node.js express web server using `pino-http` the example is located in GitHub [app.js](https://github.com/ibm-cloud-architecture/learning-cloudnative-101/blob/master/examples/logging/nodejs/app.js)\n```javascript\nconst express = require('express')\nconst isProduction = process.env.NODE_ENV === 'production'\nconst formatters = {\n    level(label, number) {\n        return { level: label }\n    }\n}\nconst pino = require('pino-http')({\n    prettyPrint: isProduction ? false : true,\n    level: isProduction ? 'error' : 'info',\n    formatters: formatters,\n    messageKey: 'message'\n})\nconst PORT = process.env.PORT || 8080;\n\nvar app = express()\n\napp.use(pino)\n\napp.get('/', function (req, res) {\n    req.log.info('this is a info log message')\n    res.send('Hello World')\n})\napp.get('/error', function (req, res, next) {\n    req.log.error('Internal error with request /error')\n    res.status(503).send('Internal error')\n})\n\napp.listen(PORT, () => {\n    console.log(`Listening on PORT=${PORT} and isProduction=${isProduction}`);\n})\n```\n\n## Deploy the sample application\n\n- Create a namespace\n    ```bash\n    kubectl create deployment my-app --image=ibmcase/nodejs-logging-example\n    ```\n\n\n## Test the application\n- Expose application web service on local port 8080\n    ```shell\n    kubectl port-forward deployment/my-app 8080:8080\n    ```\n\n- Send http request to the web service\n    ```shell\n    while true; do sleep 1; curl http://localhost:8080/error -s -w \"\\n\"; done\n    ```\n    Output looks like this\n    ```\n    Internal error\n    ```\n\n- Get the logs\n    ```bash\n    kubectl logs deployment/my-app -f\n    ```\n\n- The error line printend is JSON\n    ```json\n    {\"level\":\"error\",\"time\":1591588923197,\"pid\":25,\"hostname\":\"my-app-78647889d5-nv4rt\",\"req\":{\"id\":2,\"method\":\"GET\",\"url\":\"/error\",\"headers\":{\"host\":\"localhost:8080\",\"user-agent\":\"curl/7.64.1\",\"accept\":\"*/*\"},\"remoteAddress\":\"::ffff:127.0.0.1\",\"remotePort\":48458},\"message\":\"Internal error with request /error\"}\n    ```\n\n## Find the JSON logs in LogDNA\n\n- Open the Views\n- Search for `container:nodejs-logging-example`\n\n![json-logs-nodejs](./images/json-logs-nodejs.png)\n","type":"Mdx","contentDigest":"41826882c93149f62f6828f2ee769368","counter":613,"owner":"gatsby-plugin-mdx"},"exports":[],"rawBody":"---\ntitle: Integrate logging in Node.js\ndescription: Lab to show how to use logging library in Node.js\n---\n\n### Prerequisite\n- Configure the LogDNA Agent on a kubernetes cluster, you can use one of the labs in this bootcamp located [here](/monitoring/logdna/#activities)\n\n\n## Logging library in Node.js\n\n- There are multiple logging libraries available for Node.js, on this example we are going to use [pino](https://www.npmjs.com/package/pino)\n\n- You can instrument a Node.js express web server using `pino-http` the example is located in GitHub [app.js](https://github.com/ibm-cloud-architecture/learning-cloudnative-101/blob/master/examples/logging/nodejs/app.js)\n```javascript\nconst express = require('express')\nconst isProduction = process.env.NODE_ENV === 'production'\nconst formatters = {\n    level(label, number) {\n        return { level: label }\n    }\n}\nconst pino = require('pino-http')({\n    prettyPrint: isProduction ? false : true,\n    level: isProduction ? 'error' : 'info',\n    formatters: formatters,\n    messageKey: 'message'\n})\nconst PORT = process.env.PORT || 8080;\n\nvar app = express()\n\napp.use(pino)\n\napp.get('/', function (req, res) {\n    req.log.info('this is a info log message')\n    res.send('Hello World')\n})\napp.get('/error', function (req, res, next) {\n    req.log.error('Internal error with request /error')\n    res.status(503).send('Internal error')\n})\n\napp.listen(PORT, () => {\n    console.log(`Listening on PORT=${PORT} and isProduction=${isProduction}`);\n})\n```\n\n## Deploy the sample application\n\n- Create a namespace\n    ```bash\n    kubectl create deployment my-app --image=ibmcase/nodejs-logging-example\n    ```\n\n\n## Test the application\n- Expose application web service on local port 8080\n    ```shell\n    kubectl port-forward deployment/my-app 8080:8080\n    ```\n\n- Send http request to the web service\n    ```shell\n    while true; do sleep 1; curl http://localhost:8080/error -s -w \"\\n\"; done\n    ```\n    Output looks like this\n    ```\n    Internal error\n    ```\n\n- Get the logs\n    ```bash\n    kubectl logs deployment/my-app -f\n    ```\n\n- The error line printend is JSON\n    ```json\n    {\"level\":\"error\",\"time\":1591588923197,\"pid\":25,\"hostname\":\"my-app-78647889d5-nv4rt\",\"req\":{\"id\":2,\"method\":\"GET\",\"url\":\"/error\",\"headers\":{\"host\":\"localhost:8080\",\"user-agent\":\"curl/7.64.1\",\"accept\":\"*/*\"},\"remoteAddress\":\"::ffff:127.0.0.1\",\"remotePort\":48458},\"message\":\"Internal error with request /error\"}\n    ```\n\n## Find the JSON logs in LogDNA\n\n- Open the Views\n- Search for `container:nodejs-logging-example`\n\n![json-logs-nodejs](./images/json-logs-nodejs.png)\n","frontmatter":{"title":"Integrate logging in Node.js","description":"Lab to show how to use logging library in Node.js"},"fileAbsolutePath":"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/src/pages/electives/logging/logdna/activities/logger/nodejs.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550"]}