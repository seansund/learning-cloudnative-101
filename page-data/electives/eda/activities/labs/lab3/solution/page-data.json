{"componentChunkName":"component---src-pages-electives-eda-activities-labs-lab-3-solution-mdx","path":"/electives/eda/activities/labs/lab3/solution/","result":{"pageContext":{"frontmatter":{"title":"Event-Driven Architecture Lab Solution 3 - MicroProfile Reactive Messaging","description":"Lab activities associated with the MicroProfile Reactive Messaging feature to be used with event-driven architecture enablement."},"relativePagePath":"/electives/eda/activities/labs/lab3/solution.mdx","titleType":"page","MdxNode":{"id":"b9abe0ae-63fa-51b2-bcb8-2260676ff8db","children":[],"parent":"a0863f99-9a10-5b09-8c44-b8f26dedc979","internal":{"content":"---\ntitle: Event-Driven Architecture Lab Solution 3 - MicroProfile Reactive Messaging\ndescription: Lab activities associated with the MicroProfile Reactive Messaging feature to be used with event-driven architecture enablement.\n---\n\n## Using Reactive Messaging on OpenLiberty\n\nFollowing through the tutorial's `start` path via _[Getting Started](https://openliberty.io/guides/microprofile-reactive-messaging.html#getting-started)_, you will be directed through all the necessary steps to build the application as expected.\n\nContents for the `system/src/main/resources/META-INF/microprofile-config.properties` file:\n```properties\nmp.messaging.connector.liberty-kafka.bootstrap.servers=<your-bootstrap-nodes-property-of-your-IBM-Event-Streams-on-Cloud-instance>\n\nmp.messaging.connector.liberty-kafka.security.protocol=SASL_SSL\nmp.messaging.connector.liberty-kafka.ssl.protocol=TLSv1.2\nmp.messaging.connector.liberty-kafka.sasl.mechanism=PLAIN\nmp.messaging.connector.liberty-kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=\"<your-api-key-of-your-IBM-Event-Streams-on-Cloud-instance>\";\n\nmp.messaging.outgoing.systemLoad.connector=liberty-kafka\nmp.messaging.outgoing.systemLoad.topic=systemLoadTopic\nmp.messaging.outgoing.systemLoad.key.serializer=org.apache.kafka.common.serialization.StringSerializer\nmp.messaging.outgoing.systemLoad.value.serializer=io.openliberty.guides.models.SystemLoad$SystemLoadSerializer\n```\n\nContents for the `inventory/src/main/resources/META-INF/microprofile-config.properties` file:\n```properties\nmp.messaging.connector.liberty-kafka.bootstrap.servers=<your-bootstrap-nodes-property-of-your-IBM-Event-Streams-on-Cloud-instance>\n\nmp.messaging.connector.liberty-kafka.security.protocol=SASL_SSL\nmp.messaging.connector.liberty-kafka.ssl.protocol=TLSv1.2\nmp.messaging.connector.liberty-kafka.sasl.mechanism=PLAIN\nmp.messaging.connector.liberty-kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=\"<your-api-key-of-your-IBM-Event-Streams-on-Cloud-instance>\";\n\nmp.messaging.incoming.systemLoad.connector=liberty-kafka\nmp.messaging.incoming.systemLoad.topic=systemLoadTopic\nmp.messaging.incoming.systemLoad.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer\nmp.messaging.incoming.systemLoad.value.deserializer=io.openliberty.guides.models.SystemLoad$SystemLoadDeserializer\nmp.messaging.incoming.systemLoad.group.id=system-load-status\n```\n\nAs the tutorial is built to run Kafka and Zookeeper locally in containers as well, you can replace the `startContainers.sh` script in the project with the following:\n```bash\n#!/bin/bash\n\nNETWORK=reactive-app\n\ndocker network create $NETWORK\n\ndocker run -d \\\n  -p 9083:9083 \\\n  --network=$NETWORK \\\n  --name=system \\\n  --rm \\\n  system:1.0-SNAPSHOT &\n\ndocker run -d \\\n  -p 9085:9085 \\\n  --network=$NETWORK \\\n  --name=inventory \\\n  --rm \\\n  inventory:1.0-SNAPSHOT &\n\nwait\n   ```\n\n## Using Reactive Messaging with Quarkus\n\nFollowing along with *[Creating the Maven project](https://quarkus.io/guides/kafka#creating-the-maven-project)* through the *[Get it running](https://quarkus.io/guides/kafka#get-it-running)* section, you will be walked through the necessary steps to create a simple Quarkus-based project that utilizes the Reactive Messaging feature of MicroProfile.\n\nYour `application.properties` file will need to contain the necessary security and credential information to configure the connector correctly:\n\n```properties\nmp.messaging.connector.smallrye-kafka.bootstrap.servers=<your-bootstrap-nodes-property-of-your-IBM-Event-Streams-on-Cloud-instance>\n\nmp.messaging.connector.smallrye-kafka.security.protocol=SASL_SSL\nmp.messaging.connector.smallrye-kafka.ssl.protocol=TLSv1.2\nmp.messaging.connector.smallrye-kafka.sasl.mechanism=PLAIN\nmp.messaging.connector.smallrye-kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=\"<your-api-key-of-your-IBM-Event-Streams-on-Cloud-instance>\";\n\n# Configure the Kafka sink (we write to it)\nmp.messaging.outgoing.generated-price.connector=smallrye-kafka\nmp.messaging.outgoing.generated-price.topic=prices\nmp.messaging.outgoing.generated-price.value.serializer=org.apache.kafka.common.serialization.IntegerSerializer\n\n# Configure the Kafka source (we read from it)\nmp.messaging.incoming.prices.connector=smallrye-kafka\nmp.messaging.incoming.prices.value.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer\n```\n","type":"Mdx","contentDigest":"2a173cda7f75de924e7bf50c67715286","counter":608,"owner":"gatsby-plugin-mdx"},"exports":[],"rawBody":"---\ntitle: Event-Driven Architecture Lab Solution 3 - MicroProfile Reactive Messaging\ndescription: Lab activities associated with the MicroProfile Reactive Messaging feature to be used with event-driven architecture enablement.\n---\n\n## Using Reactive Messaging on OpenLiberty\n\nFollowing through the tutorial's `start` path via _[Getting Started](https://openliberty.io/guides/microprofile-reactive-messaging.html#getting-started)_, you will be directed through all the necessary steps to build the application as expected.\n\nContents for the `system/src/main/resources/META-INF/microprofile-config.properties` file:\n```properties\nmp.messaging.connector.liberty-kafka.bootstrap.servers=<your-bootstrap-nodes-property-of-your-IBM-Event-Streams-on-Cloud-instance>\n\nmp.messaging.connector.liberty-kafka.security.protocol=SASL_SSL\nmp.messaging.connector.liberty-kafka.ssl.protocol=TLSv1.2\nmp.messaging.connector.liberty-kafka.sasl.mechanism=PLAIN\nmp.messaging.connector.liberty-kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=\"<your-api-key-of-your-IBM-Event-Streams-on-Cloud-instance>\";\n\nmp.messaging.outgoing.systemLoad.connector=liberty-kafka\nmp.messaging.outgoing.systemLoad.topic=systemLoadTopic\nmp.messaging.outgoing.systemLoad.key.serializer=org.apache.kafka.common.serialization.StringSerializer\nmp.messaging.outgoing.systemLoad.value.serializer=io.openliberty.guides.models.SystemLoad$SystemLoadSerializer\n```\n\nContents for the `inventory/src/main/resources/META-INF/microprofile-config.properties` file:\n```properties\nmp.messaging.connector.liberty-kafka.bootstrap.servers=<your-bootstrap-nodes-property-of-your-IBM-Event-Streams-on-Cloud-instance>\n\nmp.messaging.connector.liberty-kafka.security.protocol=SASL_SSL\nmp.messaging.connector.liberty-kafka.ssl.protocol=TLSv1.2\nmp.messaging.connector.liberty-kafka.sasl.mechanism=PLAIN\nmp.messaging.connector.liberty-kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=\"<your-api-key-of-your-IBM-Event-Streams-on-Cloud-instance>\";\n\nmp.messaging.incoming.systemLoad.connector=liberty-kafka\nmp.messaging.incoming.systemLoad.topic=systemLoadTopic\nmp.messaging.incoming.systemLoad.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer\nmp.messaging.incoming.systemLoad.value.deserializer=io.openliberty.guides.models.SystemLoad$SystemLoadDeserializer\nmp.messaging.incoming.systemLoad.group.id=system-load-status\n```\n\nAs the tutorial is built to run Kafka and Zookeeper locally in containers as well, you can replace the `startContainers.sh` script in the project with the following:\n```bash\n#!/bin/bash\n\nNETWORK=reactive-app\n\ndocker network create $NETWORK\n\ndocker run -d \\\n  -p 9083:9083 \\\n  --network=$NETWORK \\\n  --name=system \\\n  --rm \\\n  system:1.0-SNAPSHOT &\n\ndocker run -d \\\n  -p 9085:9085 \\\n  --network=$NETWORK \\\n  --name=inventory \\\n  --rm \\\n  inventory:1.0-SNAPSHOT &\n\nwait\n   ```\n\n## Using Reactive Messaging with Quarkus\n\nFollowing along with *[Creating the Maven project](https://quarkus.io/guides/kafka#creating-the-maven-project)* through the *[Get it running](https://quarkus.io/guides/kafka#get-it-running)* section, you will be walked through the necessary steps to create a simple Quarkus-based project that utilizes the Reactive Messaging feature of MicroProfile.\n\nYour `application.properties` file will need to contain the necessary security and credential information to configure the connector correctly:\n\n```properties\nmp.messaging.connector.smallrye-kafka.bootstrap.servers=<your-bootstrap-nodes-property-of-your-IBM-Event-Streams-on-Cloud-instance>\n\nmp.messaging.connector.smallrye-kafka.security.protocol=SASL_SSL\nmp.messaging.connector.smallrye-kafka.ssl.protocol=TLSv1.2\nmp.messaging.connector.smallrye-kafka.sasl.mechanism=PLAIN\nmp.messaging.connector.smallrye-kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=\"<your-api-key-of-your-IBM-Event-Streams-on-Cloud-instance>\";\n\n# Configure the Kafka sink (we write to it)\nmp.messaging.outgoing.generated-price.connector=smallrye-kafka\nmp.messaging.outgoing.generated-price.topic=prices\nmp.messaging.outgoing.generated-price.value.serializer=org.apache.kafka.common.serialization.IntegerSerializer\n\n# Configure the Kafka source (we read from it)\nmp.messaging.incoming.prices.connector=smallrye-kafka\nmp.messaging.incoming.prices.value.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer\n```\n","frontmatter":{"title":"Event-Driven Architecture Lab Solution 3 - MicroProfile Reactive Messaging","description":"Lab activities associated with the MicroProfile Reactive Messaging feature to be used with event-driven architecture enablement."},"fileAbsolutePath":"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/src/pages/electives/eda/activities/labs/lab3/solution.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550"]}