{"componentChunkName":"component---src-pages-lectures-kube-overview-activities-labs-ingress-iks-index-mdx","path":"/lectures/kube-overview/activities/labs/ingress-iks/","result":{"pageContext":{"frontmatter":{"title":"Kubernetes Lab Ingress Controller IBM Free Kubernetes cluster"},"relativePagePath":"/lectures/kube-overview/activities/labs/ingress-iks/index.mdx","titleType":"page","MdxNode":{"id":"d3cfb2ce-f2e3-53a7-bbe1-46f5d736afa6","children":[],"parent":"9936ea8c-60b5-58b9-a972-9dfe3dc4b863","internal":{"content":"---\ntitle: Kubernetes Lab Ingress Controller IBM Free Kubernetes cluster\n---\n\nThe [IBM Kubernetes service](https://www.ibm.com/cloud/container-service) free clusters consist of a single worker node with 2 CPU and 4 GB of memory for experimenting with Kubernetes. Unlike the fee-based service, these clusters do not include capabilities for application load balancing using ingress out-of-the-box. \n\n## Prerequisites\n\n* Free IBM Kubernetes Cluster (IKS) - upgrade your account from **Lite** plan to create one. In the example commands, we'll assume that this cluster is named `mycluster`\n* kubectl - match your cluster API version \n* Log in to IBM Cloud and configure `kubectl` using the `ibmcloud ks cluster config --cluster mycluster` command\n\n## Components\n\nOn the IKS cluster, you will install helm charts for a [nginx ingress controller](https://github.com/nginxinc/kubernetes-ingress/tree/release-1.7/deployments/helm-chart) from NGINX. This lab already provides the templated yaml files so there is no need to use helm cli.\n\n\n## Set up the ingress controller\n\n*Only do this on a free IKS instance* These steps assume facts that only apply to free IKS instances:\n\n* a single worker where the cluster administrator can create pods that bind to host ports\n* no pre-existing ingress controller or application load balancer\n\nUsing the following steps with a paid instance can cause issues. See the [IBM Cloud containers documentation](https://cloud.ibm.com/docs/containers?topic=containers-cs_network_planning) for information on exposing applications with the ingress/alb services for paid clusters. **You have been warned**\n\n1. Install the NGINX ingress controller with `helm` using a daemonset and no service resource (which will result in a single pod that binds to ports 80 and 443 on the worker node and will skip creation of a `ClusterIP, LoadBalancer, or NodePort` for the daemonset).\n    ```bash\n    kubectl apply -f https://cloudnative101.dev/yamls/ingress-controller/iks-ingress-v1.7.1.yaml\n    ```\n\n1. You can use free domain `.nip.io` to get a domain name using one of the IP Address of your worker nodes. Run this command to set your DOMAIN\n    ```bash\n    export DOMAIN=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type==\"ExternalIP\")].address}').nip.io\n    echo $DOMAIN\n    ```\n    \n1. You can test the ingress controller using the `$DOMAIN`:\n\n    ```bash\n    curl -I http://$DOMAIN\n    ```\n    ```\n    HTTP/1.1 404 Not Found\n    Server: nginx/1.17.10\n    ...\n    ```\n    \n    A **404** is expected at this point because unlike the [kubernetes nginx ingress](https://github.com/kubernetes/ingress-nginx), the NGINX version of the ingress controller does not create a default backend deployment.\n\n1. To use the ingress controller deploy a sample application, expose a service.\n    ```bash\n    kubectl create deployment web --image=bitnami/nginx\n    kubectl expose deployment web --name=web --port 8080\n    ```\n\n1. Now create an Ingress resource\n    ```bash\n    cat <<EOF | kubectl apply -f -\n    apiVersion: networking.k8s.io/v1beta1\n    kind: Ingress\n    metadata:\n      name: web\n      labels:\n        app: web\n    spec:\n      rules:\n        - host: web.$DOMAIN\n          http:\n            paths:\n              - path: /\n                backend:\n                  serviceName: web\n                  servicePort: 8080\n    EOF\n    echo \"Access your web app at http://web.$DOMAIN\"\n    ```\n1. List the created ingress\n    ```bash\n    kubectl get ingress web\n    ```\n\n1. Access your web application\n   ```bash\n   curl http://web.$DOMAIN\n   ```\n   The output prints the html\n   ```html\n   <p><em>Thank you for using nginx.</em></p>\n   ```\n\n1. Delete all the resources created\n    ```bash\n    kubectl delete deployment,svc,ingress -l app=web\n    ```\n","type":"Mdx","contentDigest":"1f8f16fe5e0c76f7933d2da5d0c1170c","counter":621,"owner":"gatsby-plugin-mdx"},"exports":[],"rawBody":"---\ntitle: Kubernetes Lab Ingress Controller IBM Free Kubernetes cluster\n---\n\nThe [IBM Kubernetes service](https://www.ibm.com/cloud/container-service) free clusters consist of a single worker node with 2 CPU and 4 GB of memory for experimenting with Kubernetes. Unlike the fee-based service, these clusters do not include capabilities for application load balancing using ingress out-of-the-box. \n\n## Prerequisites\n\n* Free IBM Kubernetes Cluster (IKS) - upgrade your account from **Lite** plan to create one. In the example commands, we'll assume that this cluster is named `mycluster`\n* kubectl - match your cluster API version \n* Log in to IBM Cloud and configure `kubectl` using the `ibmcloud ks cluster config --cluster mycluster` command\n\n## Components\n\nOn the IKS cluster, you will install helm charts for a [nginx ingress controller](https://github.com/nginxinc/kubernetes-ingress/tree/release-1.7/deployments/helm-chart) from NGINX. This lab already provides the templated yaml files so there is no need to use helm cli.\n\n\n## Set up the ingress controller\n\n*Only do this on a free IKS instance* These steps assume facts that only apply to free IKS instances:\n\n* a single worker where the cluster administrator can create pods that bind to host ports\n* no pre-existing ingress controller or application load balancer\n\nUsing the following steps with a paid instance can cause issues. See the [IBM Cloud containers documentation](https://cloud.ibm.com/docs/containers?topic=containers-cs_network_planning) for information on exposing applications with the ingress/alb services for paid clusters. **You have been warned**\n\n1. Install the NGINX ingress controller with `helm` using a daemonset and no service resource (which will result in a single pod that binds to ports 80 and 443 on the worker node and will skip creation of a `ClusterIP, LoadBalancer, or NodePort` for the daemonset).\n    ```bash\n    kubectl apply -f https://cloudnative101.dev/yamls/ingress-controller/iks-ingress-v1.7.1.yaml\n    ```\n\n1. You can use free domain `.nip.io` to get a domain name using one of the IP Address of your worker nodes. Run this command to set your DOMAIN\n    ```bash\n    export DOMAIN=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type==\"ExternalIP\")].address}').nip.io\n    echo $DOMAIN\n    ```\n    \n1. You can test the ingress controller using the `$DOMAIN`:\n\n    ```bash\n    curl -I http://$DOMAIN\n    ```\n    ```\n    HTTP/1.1 404 Not Found\n    Server: nginx/1.17.10\n    ...\n    ```\n    \n    A **404** is expected at this point because unlike the [kubernetes nginx ingress](https://github.com/kubernetes/ingress-nginx), the NGINX version of the ingress controller does not create a default backend deployment.\n\n1. To use the ingress controller deploy a sample application, expose a service.\n    ```bash\n    kubectl create deployment web --image=bitnami/nginx\n    kubectl expose deployment web --name=web --port 8080\n    ```\n\n1. Now create an Ingress resource\n    ```bash\n    cat <<EOF | kubectl apply -f -\n    apiVersion: networking.k8s.io/v1beta1\n    kind: Ingress\n    metadata:\n      name: web\n      labels:\n        app: web\n    spec:\n      rules:\n        - host: web.$DOMAIN\n          http:\n            paths:\n              - path: /\n                backend:\n                  serviceName: web\n                  servicePort: 8080\n    EOF\n    echo \"Access your web app at http://web.$DOMAIN\"\n    ```\n1. List the created ingress\n    ```bash\n    kubectl get ingress web\n    ```\n\n1. Access your web application\n   ```bash\n   curl http://web.$DOMAIN\n   ```\n   The output prints the html\n   ```html\n   <p><em>Thank you for using nginx.</em></p>\n   ```\n\n1. Delete all the resources created\n    ```bash\n    kubectl delete deployment,svc,ingress -l app=web\n    ```\n","frontmatter":{"title":"Kubernetes Lab Ingress Controller IBM Free Kubernetes cluster"},"fileAbsolutePath":"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/src/pages/lectures/kube-overview/activities/labs/ingress-iks/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550"]}