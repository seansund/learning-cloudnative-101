{"componentChunkName":"component---src-pages-lectures-kube-services-networking-index-mdx","path":"/lectures/kube-services-networking/","result":{"pageContext":{"frontmatter":{"title":"Services & Networking","description":"Services & Networking in Kubernetes"},"relativePagePath":"/lectures/kube-services-networking/index.mdx","titleType":"page","MdxNode":{"id":"1b7f2302-5fd4-5050-a83f-6b6797f91344","children":[],"parent":"985f229c-50db-5c67-991b-caf8374c2011","internal":{"content":"---\ntitle: Services & Networking\ndescription:  Services & Networking in Kubernetes\n---\n\n<AnchorLinks small>\n  <AnchorLink>Services</AnchorLink>\n  <AnchorLink>Ingress</AnchorLink>\n  <AnchorLink>Activities</AnchorLink>\n</AnchorLinks>\n\n# Services\n\nAn abstract way to expose an application running on a set of Pods as a network service.\n\nKubernetes Pods are mortal. They are born and when they die, they are not resurrected. If you use a Deployment to run your app, it can create and destroy Pods dynamically.\n\nEach Pod gets its own IP address, however in a Deployment, the set of Pods running in one moment in time could be different from the set of Pods running that application a moment later.\n\nIn Kubernetes, a Service is an abstraction which defines a logical set of Pods and a policy by which to access them (sometimes this pattern is called a micro-service). The set of Pods targeted by a Service is usually determined by a selector (see below for why you might want a Service without a selector).\n\nIf you’re able to use Kubernetes APIs for service discovery in your application, you can query the API server for Endpoints, that get updated whenever the set of Pods in a Service changes.\n\nFor non-native applications, Kubernetes offers ways to place a network port or load balancer in between your application and the backend Pods.\n\n\n## Resources\n\n**IKS & OpenShift**\n- [Services](https://kubernetes.io/docs/concepts/services-networking/service/)\n- [Exposing Services](https://kubernetes.io/docs/tutorials/kubernetes-basics/expose/expose-intro/)\n\n## References\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\n  labels:\n    app: nginx\n    version: v1\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n        version: v1\n    spec:\n      containers:\n      - name: nginx\n        image: bitnami/nginx\n        ports:\n        - containerPort: 8080\n          name: http\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\nspec:\n  selector:\n    app: nginx\n  ports:\n    - name: http\n      port: 80\n      targetPort: http\n```\n<Tabs>\n<Tab label=\"OpenShift\">\n\n** Get Service **\n```\noc get svc\n```\n** Get Service Description **\n```\noc describe svc my-service\n```\n** Expose a service **\n```\noc expose service <service_name>\n```\n** Get Route for the Service **\n```  \noc get route\n```\n\n</Tab>\n\n<Tab label=\"IKS\">\n\n** Get Service **\n```\nkubectl get svc\n```\n** Get Service Description **\n```\nkubectl describe svc my-service\n```\n** Get Service Endpoints **\n```\nkubectl get ep my-service\n```\n** Expose a Deployment via a Service **\n```\nkubectl expose deployment my-deployment --port 80 --target-port=http --selector app=nginx --name my-service-2 --type NodePort\n```\n\n</Tab>\n\n</Tabs>\n\n# Routes\n\n(OpenShift Only)\n\nRoutes are Openshift objects that expose services for external clients to reach them by name.  \n\nRoutes can insecured or secured on creation using certificates.\n\nThe new route inherits the name from the service unless you specify one using the --name option.\n\n## Resources\n\n**OpenShift**\n- [Routes](https://docs.openshift.com/online/pro/dev_guide/routes.html)\n- [Route Configuration](https://docs.openshift.com/container-platform/4.3/networking/routes/route-configuration.html)\n- [Secured Routes](https://docs.openshift.com/container-platform/4.3/networking/routes/secured-routes.html)\n\n## References\n\n** Route Creation **\n```\napiVersion: v1\nkind: Route\nmetadata:\n  name: frontend\nspec:\n  to:\n    kind: Service\n    name: frontend\n```\n** Secured Route Creation **\n```\napiVersion: v1\nkind: Route\nmetadata:\n  name: frontend\nspec:\n  to:\n    kind: Service\n    name: frontend\n  tls:\n    termination: edge\n```\n\n### Commands\n<Tabs>\n<Tab label=\"OpenShift\">\n\n** Create Route from YAML **\n```\noc apply -f route.yaml\n```\n** Get Route **\n```\noc get route\n```\n** Describe Route **\n```\noc get route <route-name>\n```\n** Get Route YAML **\n```\noc get route <route-name> -o yaml\n```\n\n</Tab>\n</Tabs>\n\n# Ingress\n\nAn API object that manages external access to the services in a cluster, typically HTTP.\n\nIngress can provide load balancing, SSL termination and name-based virtual hosting.\n\nIngress exposes HTTP and HTTPS routes from outside the cluster to services within the cluster. Traffic routing is controlled by rules defined on the Ingress resource.\n\n## Resources\n\n**OpenShift**\n- [Ingress Operator](https://docs.openshift.com/container-platform/4.3/networking/ingress-operator.html)\n- [Using Ingress Controllers](https://docs.openshift.com/container-platform/4.3/networking/configuring_ingress_cluster_traffic/configuring-ingress-cluster-traffic-ingress-controller.html)\n\n**IKS**\n- [Ingress](https://kubernetes.io/docs/concepts/services-networking/ingress/)\n- [Ingress Controllers](https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/)\n- [Minikube Ingress](https://kubernetes.io/docs/tasks/access-application-cluster/ingress-minikube/)\n\n## References\n\n```yaml\napiVersion: networking.k8s.io/v1beta1 # for versions before 1.14 use extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: example-ingress\nspec:\n  rules:\n  - host: hello-world.info\n    http:\n      paths:\n      - path: /\n        backend:\n          serviceName: web\n          servicePort: 8080\n```\n<Tabs>\n<Tab label=\"OpenShift\">\n\n** View Ingress Status **\n```\noc describe clusteroperators/ingress\n```\n** Describe default Ingress Controller **\n```\noc describe --namespace=openshift-ingress-operator ingresscontroller/default\n```\n\n</Tab>\n\n<Tab label=\"IKS\">\n\n```\nminikube addons enable ingress\n```\n```\nkubectl get pods -n kube-system | grep ingress\n```\n```\nkubectl create deployment web --image=bitnami/nginx\n```\n```\nkubectl expose deployment web --name=web --port 8080\n```\n```\nkubectl get svc web\n```\n```\nminikube service --url web\n```\n```\nkubectl get ingress\n```\n```\nkubcetl describe ingress example-ingress\n```\n```\ncurl hello-world.info --resolve hello-world.info:80:<ADDRESS>\n```\n\n</Tab>\n\n</Tabs>\n\n## Activities\n\n| Task                            | Description         | Link        |\n| --------------------------------| ------------------  |:----------- |\n| *** Try It Yourself ***                         |         |         | \n| Creating Services | Create two services with certain requirements. | [Setting up Services](../kube-overview/activities/labs/lab8) |\n| IKS Ingress Controller | Configure Ingress on Free IKS Cluster | [Setting IKS Ingress](../kube-overview/activities/labs/ingress-iks) |\n","type":"Mdx","contentDigest":"f63b92869f6623443a638c918bfc00d6","counter":571,"owner":"gatsby-plugin-mdx"},"exports":[],"rawBody":"---\ntitle: Services & Networking\ndescription:  Services & Networking in Kubernetes\n---\n\n<AnchorLinks small>\n  <AnchorLink>Services</AnchorLink>\n  <AnchorLink>Ingress</AnchorLink>\n  <AnchorLink>Activities</AnchorLink>\n</AnchorLinks>\n\n# Services\n\nAn abstract way to expose an application running on a set of Pods as a network service.\n\nKubernetes Pods are mortal. They are born and when they die, they are not resurrected. If you use a Deployment to run your app, it can create and destroy Pods dynamically.\n\nEach Pod gets its own IP address, however in a Deployment, the set of Pods running in one moment in time could be different from the set of Pods running that application a moment later.\n\nIn Kubernetes, a Service is an abstraction which defines a logical set of Pods and a policy by which to access them (sometimes this pattern is called a micro-service). The set of Pods targeted by a Service is usually determined by a selector (see below for why you might want a Service without a selector).\n\nIf you’re able to use Kubernetes APIs for service discovery in your application, you can query the API server for Endpoints, that get updated whenever the set of Pods in a Service changes.\n\nFor non-native applications, Kubernetes offers ways to place a network port or load balancer in between your application and the backend Pods.\n\n\n## Resources\n\n**IKS & OpenShift**\n- [Services](https://kubernetes.io/docs/concepts/services-networking/service/)\n- [Exposing Services](https://kubernetes.io/docs/tutorials/kubernetes-basics/expose/expose-intro/)\n\n## References\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\n  labels:\n    app: nginx\n    version: v1\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n        version: v1\n    spec:\n      containers:\n      - name: nginx\n        image: bitnami/nginx\n        ports:\n        - containerPort: 8080\n          name: http\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\nspec:\n  selector:\n    app: nginx\n  ports:\n    - name: http\n      port: 80\n      targetPort: http\n```\n<Tabs>\n<Tab label=\"OpenShift\">\n\n** Get Service **\n```\noc get svc\n```\n** Get Service Description **\n```\noc describe svc my-service\n```\n** Expose a service **\n```\noc expose service <service_name>\n```\n** Get Route for the Service **\n```  \noc get route\n```\n\n</Tab>\n\n<Tab label=\"IKS\">\n\n** Get Service **\n```\nkubectl get svc\n```\n** Get Service Description **\n```\nkubectl describe svc my-service\n```\n** Get Service Endpoints **\n```\nkubectl get ep my-service\n```\n** Expose a Deployment via a Service **\n```\nkubectl expose deployment my-deployment --port 80 --target-port=http --selector app=nginx --name my-service-2 --type NodePort\n```\n\n</Tab>\n\n</Tabs>\n\n# Routes\n\n(OpenShift Only)\n\nRoutes are Openshift objects that expose services for external clients to reach them by name.  \n\nRoutes can insecured or secured on creation using certificates.\n\nThe new route inherits the name from the service unless you specify one using the --name option.\n\n## Resources\n\n**OpenShift**\n- [Routes](https://docs.openshift.com/online/pro/dev_guide/routes.html)\n- [Route Configuration](https://docs.openshift.com/container-platform/4.3/networking/routes/route-configuration.html)\n- [Secured Routes](https://docs.openshift.com/container-platform/4.3/networking/routes/secured-routes.html)\n\n## References\n\n** Route Creation **\n```\napiVersion: v1\nkind: Route\nmetadata:\n  name: frontend\nspec:\n  to:\n    kind: Service\n    name: frontend\n```\n** Secured Route Creation **\n```\napiVersion: v1\nkind: Route\nmetadata:\n  name: frontend\nspec:\n  to:\n    kind: Service\n    name: frontend\n  tls:\n    termination: edge\n```\n\n### Commands\n<Tabs>\n<Tab label=\"OpenShift\">\n\n** Create Route from YAML **\n```\noc apply -f route.yaml\n```\n** Get Route **\n```\noc get route\n```\n** Describe Route **\n```\noc get route <route-name>\n```\n** Get Route YAML **\n```\noc get route <route-name> -o yaml\n```\n\n</Tab>\n</Tabs>\n\n# Ingress\n\nAn API object that manages external access to the services in a cluster, typically HTTP.\n\nIngress can provide load balancing, SSL termination and name-based virtual hosting.\n\nIngress exposes HTTP and HTTPS routes from outside the cluster to services within the cluster. Traffic routing is controlled by rules defined on the Ingress resource.\n\n## Resources\n\n**OpenShift**\n- [Ingress Operator](https://docs.openshift.com/container-platform/4.3/networking/ingress-operator.html)\n- [Using Ingress Controllers](https://docs.openshift.com/container-platform/4.3/networking/configuring_ingress_cluster_traffic/configuring-ingress-cluster-traffic-ingress-controller.html)\n\n**IKS**\n- [Ingress](https://kubernetes.io/docs/concepts/services-networking/ingress/)\n- [Ingress Controllers](https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/)\n- [Minikube Ingress](https://kubernetes.io/docs/tasks/access-application-cluster/ingress-minikube/)\n\n## References\n\n```yaml\napiVersion: networking.k8s.io/v1beta1 # for versions before 1.14 use extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: example-ingress\nspec:\n  rules:\n  - host: hello-world.info\n    http:\n      paths:\n      - path: /\n        backend:\n          serviceName: web\n          servicePort: 8080\n```\n<Tabs>\n<Tab label=\"OpenShift\">\n\n** View Ingress Status **\n```\noc describe clusteroperators/ingress\n```\n** Describe default Ingress Controller **\n```\noc describe --namespace=openshift-ingress-operator ingresscontroller/default\n```\n\n</Tab>\n\n<Tab label=\"IKS\">\n\n```\nminikube addons enable ingress\n```\n```\nkubectl get pods -n kube-system | grep ingress\n```\n```\nkubectl create deployment web --image=bitnami/nginx\n```\n```\nkubectl expose deployment web --name=web --port 8080\n```\n```\nkubectl get svc web\n```\n```\nminikube service --url web\n```\n```\nkubectl get ingress\n```\n```\nkubcetl describe ingress example-ingress\n```\n```\ncurl hello-world.info --resolve hello-world.info:80:<ADDRESS>\n```\n\n</Tab>\n\n</Tabs>\n\n## Activities\n\n| Task                            | Description         | Link        |\n| --------------------------------| ------------------  |:----------- |\n| *** Try It Yourself ***                         |         |         | \n| Creating Services | Create two services with certain requirements. | [Setting up Services](../kube-overview/activities/labs/lab8) |\n| IKS Ingress Controller | Configure Ingress on Free IKS Cluster | [Setting IKS Ingress](../kube-overview/activities/labs/ingress-iks) |\n","frontmatter":{"title":"Services & Networking","description":"Services & Networking in Kubernetes"},"fileAbsolutePath":"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/src/pages/lectures/kube-services-networking/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550"]}