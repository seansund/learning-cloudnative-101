{"componentChunkName":"component---src-pages-lectures-containers-activities-index-mdx","path":"/lectures/containers/activities/","result":{"pageContext":{"frontmatter":{"title":"Lab - Docker","description":"Lab introducting docker concepts"},"relativePagePath":"/lectures/containers/activities/index.mdx","titleType":"page","MdxNode":{"id":"14616861-18c0-5337-ba73-d83d88105b10","children":[],"parent":"23cff06e-f711-590a-b263-49ba97e23d9c","internal":{"content":"---\ntitle: Lab - Docker\ndescription: Lab introducting docker concepts\n---\n\n<AnchorLinks>\n  <AnchorLink>Introduction</AnchorLink>\n  <AnchorLink>Prerequisites</AnchorLink>\n  <AnchorLink>Working with docker</AnchorLink>\n  <AnchorLink>Get the sample application</AnchorLink>\n  <AnchorLink>Run the application on Docker</AnchorLink>\n    <AnchorLinks small>\n      <AnchorLink>Build the docker image</AnchorLink>\n      <AnchorLink>Run the docker container</AnchorLink>\n      <AnchorLink>Access the application</AnchorLink>\n      <AnchorLink>Pushing an image to a Registry</AnchorLink>\n      <AnchorLink>Clean Up</AnchorLink>\n      <AnchorLink>Pulling an image from the registry</AnchorLink>\n    </AnchorLinks>\n  <AnchorLink>Conclusion</AnchorLink>\n</AnchorLinks>\n\n## Introduction\n\nIn this lab, you will learn about how to use docker and how to run applications using docker.\n\n## Prerequisites\n\n- Create a [DockerHub account](https://hub.docker.com/). This account is needed to push images to docker registry. Also create a repository following the instructions [here](https://docs.docker.com/docker-hub/repos/).\n- You need to install [Docker](https://www.docker.com/) in your environment. Follow the instructions [here](https://docs.docker.com/docker-for-mac/install/) to install it on Mac and [here](https://docs.docker.com/docker-for-windows/install/) to install it on Windows.\n\n## Working with docker\n\nBefore proceeding, make sure docker is properly installed on your system. \n\n1. Please verify your Docker by looking up the version.\n\nIf it is installed, you will see a version number something similar to below.\n\n```bash\n$ <command>\nDocker version 19.03.0-beta3, build c55e026\n```\n\n** Running a hello-world container **\n\nLet us start with a `hello-world` container. \n\n2. run a `hello-world` container.\n\nIf it is successfully run, you will see something like below.\n\n```bash\n$ <command>\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n1b930d010525: Pull complete\nDigest: sha256:41a65640635299bab090f783209c1e3a3f11934cf7756b09cb2f1e02147c6ed8\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\n```\n\nSince, `hello-world` image is not existing locally, it is pulled from `library/hello-world`. But if it is already existing, docker will not pull it every time but rather use the existing one.\n\nThis image is pulled from https://hub.docker.com/_/hello-world. Docker hub is a repository used to store docker images. Similarly, you can use your own registries to store images. For example, IBM Cloud provides you a container registry.\n\n**Verifying the hello-world image**\n\n3. Now verify if an image is existing in your system locally.\n\nYou will then see something like below.\n\n```bash\n$ <command>\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nhello-world         latest              fce289e99eb9        5 months ago        1.84kB\n```\n\n## Get the sample application\n\nTo get the sample application, you will need to clone it from github.\n\n```bash\n# Clone the sample app\ngit clone https://github.com/ibm-cloud-architecture/cloudnative_sample_app.git\n\n# Go to the project's root folder\ncd cloudnative_sample_app/\n```\n\n## Run the application on Docker\n\n### Build the docker image\n\nLet's take look at the docker file before building it.\n\n```\nFROM maven:3.3-jdk-8 as builder\n\nCOPY . .\nRUN mvn clean install\n\nFROM openliberty/open-liberty:springBoot2-ubi-min as staging\n\nCOPY --chown=1001:0 --from=builder /target/cloudnativesampleapp-1.0-SNAPSHOT.jar /config/app.jar\nRUN springBootUtility thin \\\n    --sourceAppPath=/config/app.jar \\\n    --targetThinAppPath=/config/dropins/spring/thinClinic.jar \\\n    --targetLibCachePath=/opt/ol/wlp/usr/shared/resources/lib.index.cache\n\n```\n\n- Using the `FROM` instruction, we provide the name and tag of an image that should be used as our base. This must always be the first instruction in the Dockerfile.\n- Using `COPY` instruction, we copy new contents from the source filesystem to the container filesystem.\n- `RUN` instruction executes the commands.\n\nThis Dockerfile leverages multi-stage builds, which lets you create multiple stages in your Dockerfile to do certain tasks.\n\nIn our case, we have two stages.\n\n- The first one uses `maven:3.3-jdk-8` as its base image to download and build the project and its dependencies using Maven.\n- The second stage uses `openliberty/open-liberty:springBoot2-ubi-min` as its base image to run the compiled code from the previous stage.\n\nThe advantage of using the multi-stage builds approach is that the resulting image only uses the base image of the last stage. Meaning that in our case, we will only end up with the `openliberty/open-liberty:springBoot2-ubi-min` as our base image, which is much tinier than having an image that has both Maven and the JRE.\n\nBy using the multi-stage builds approach when it makes sense to use it, you will end up with much lighter and easier to maintain images, which can save you space on your Docker Registry. Also, having tinier images usually means less resource consumption on your worker nodes, which can result cost-savings.\n\n\nOnce, you have the docker file ready, the next step is to build it. The `build` command allows you to build a docker image which you can later run as a container.\n\n1. Build the docker file with the `image_name` of `greeting` and give it a `image_tag` of `v1.0.0` and build it using the current context.\n\nYou will see something like below:\n\n``` bash\n$ <command>\nSending build context to Docker daemon  22.17MB\nStep 1/6 : FROM maven:3.3-jdk-8 as builder\n ---> 9997d8483b2f\nStep 2/6 : COPY . .\n ---> c198e3e54023\nStep 3/6 : RUN mvn clean install\n ---> Running in 24378df7f87b\n[INFO] Scanning for projects...\n.\n.\n.\n[INFO] Installing /target/cloudnativesampleapp-1.0-SNAPSHOT.jar to /root/.m2/repository/projects/cloudnativesampleapp/1.0-SNAPSHOT/cloudnativesampleapp-1.0-SNAPSHOT.jar\n[INFO] Installing /pom.xml to /root/.m2/repository/projects/cloudnativesampleapp/1.0-SNAPSHOT/cloudnativesampleapp-1.0-SNAPSHOT.pom\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 44.619 s\n[INFO] Finished at: 2020-04-06T16:07:04+00:00\n[INFO] Final Memory: 38M/385M\n[INFO] ------------------------------------------------------------------------\nRemoving intermediate container 24378df7f87b\n ---> cc5620334e1b\nStep 4/6 : FROM openliberty/open-liberty:springBoot2-ubi-min as staging\n ---> 021530b0b3cb\nStep 5/6 : COPY --chown=1001:0 --from=builder /target/cloudnativesampleapp-1.0-SNAPSHOT.jar /config/app.jar\n ---> dbc81e5f4691\nStep 6/6 : RUN springBootUtility thin     --sourceAppPath=/config/app.jar     --targetThinAppPath=/config/dropins/spring/thinClinic.jar     --targetLibCachePath=/opt/ol/wlp/usr/shared/resources/lib.index.cache\n ---> Running in 8ea80b5863cb\nCreating a thin application from: /config/app.jar\nLibrary cache: /opt/ol/wlp/usr/shared/resources/lib.index.cache\nThin application: /config/dropins/spring/thinClinic.jar\nRemoving intermediate container 8ea80b5863cb\n ---> a935a129dcb2\nSuccessfully built a935a129dcb2\nSuccessfully tagged greeting:v1.0.0\n```\n\n2. Next, verify your newly built image\n\nThe output will be as follows.\n\n```bash\n$ <command>\nREPOSITORY                           TAG                   IMAGE ID            CREATED             SIZE\ngreeting                             v1.0.0                89bd7032fdee        51 seconds ago      537MB\nopenliberty/open-liberty             springBoot2-ubi-min   bcfcb2c5ce16        6 days ago          480MB\nhello-world                          latest                f9cad508cb4c        5 months ago        1.84kB\n```\n\n### Run the docker container\n\nNow let's try running the docker container. Run it with the following parameters:\n\n3. Expose port `9080`. Run it in the background in detached mode. Give the container the name of `greeting`.\n\nOnce done, you will have something like below.\n\n```bash\n$ <command>\nbc2dc95a6bd1f51a226b291999da9031f4443096c1462cb3fead3df36613b753\n```\n\nAlso, docker cannot create two containers with the same name. If you try to run the same container having the same name again, you will see something like below.\n\n```bash\n$ <command>\ndocker: Error response from daemon: Conflict. The container name \"/greeting\" is already in use by container \"a74b91789b29af6e7be92b30d0e68eef852bfb24336a44ef1485bb58becbd664\". You have to remove (or rename) that container to be able to reuse that name.\nSee 'docker run --help'.\n```\n\nIt is a good practice to name your containers. Naming helps you to discover your service easily.\n\n4. List all the running containers.\n\nYou will see something like below.\n\n```bash\n$ <command>\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                              NAMES\nbc2dc95a6bd1        greeting:v1.0.0     \"/opt/ol/helpers/run…\"   18 minutes ago      Up 18 minutes       0.0.0.0:9080->9080/tcp, 9443/tcp   greeting\n```\n\n5. Let's inspect the running container.\n\nBy inspecting the container, you can access detailed information about the container. By using this command, you get to know the details about network settings, volumes, configs, state etc.\n\nIf we consider our container, it is as follows. You can see lot of information about the `greeting` container.\n\n```bash\n$ <command>\n[\n    {\n        \"Id\": \"bc2dc95a6bd1f51a226b291999da9031f4443096c1462cb3fead3df36613b753\",\n        \"Created\": \"2019-08-30T16:56:40.2081539Z\",\n        \"Path\": \"/opt/ol/helpers/runtime/docker-server.sh\",\n        \"Args\": [\n            \"/opt/ol/wlp/bin/server\",\n            \"run\",\n            \"defaultServer\"\n        ],\n        \"State\": {\n            \"Status\": \"running\",\n            \"Running\": true,\n            \"Paused\": false,\n            \"Restarting\": false,\n            \"OOMKilled\": false,\n            \"Dead\": false,\n            \"Pid\": 27548,\n            \"ExitCode\": 0,\n            \"Error\": \"\",\n            \"StartedAt\": \"2019-08-30T16:56:41.0927889Z\",\n            \"FinishedAt\": \"0001-01-01T00:00:00Z\"\n        },\n        ..........\n        ..........\n        ..........\n    }\n]\n```\n\n6. Get the logs of the `greeting` container.\n\nIt helps you to access the logs of your container. It allows you to debug the container if it fails. It also lets you to know what is happening with your application.\n\nAt the end, you will see something like below.\n\n```bash\n.   ____          _            __ _ _\n/\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n\\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n'  |____| .__|_| |_|_| |_\\__, | / / / /\n=========|_|==============|___/=/_/_/_/\n:: Spring Boot ::        (v2.1.7.RELEASE)\n2019-08-30 16:57:01.494  INFO 1 --- [ecutor-thread-5] application.SBApplication                : Starting SBApplication on bc2dc95a6bd1 with PID 1 (/opt/ol/wlp/usr/servers/defaultServer/dropins/spring/thinClinic.jar started by default in /opt/ol/wlp/output/defaultServer)\n2019-08-30 16:57:01.601  INFO 1 --- [ecutor-thread-5] application.SBApplication                : No active profile set, falling back to default profiles: default\n[AUDIT   ] CWWKT0016I: Web application available (default_host): http://bc2dc95a6bd1:9080/\n2019-08-30 16:57:09.641  INFO 1 --- [cutor-thread-25] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 7672 ms\n2019-08-30 16:57:12.279  INFO 1 --- [ecutor-thread-5] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 15 endpoint(s) beneath base path '/actuator'\n2019-08-30 16:57:12.974  INFO 1 --- [ecutor-thread-5] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'\n2019-08-30 16:57:13.860  INFO 1 --- [ecutor-thread-5] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed\n2019-08-30 16:57:13.961  INFO 1 --- [ecutor-thread-5] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)\n2019-08-30 16:57:14.020  INFO 1 --- [ecutor-thread-5] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references\n2019-08-30 16:57:14.504  INFO 1 --- [ecutor-thread-5] application.SBApplication                : Started SBApplication in 17.584 seconds (JVM running for 33.368)\n[AUDIT   ] CWWKZ0001I: Application thinClinic started in 21.090 seconds.\n[AUDIT   ] CWWKF0012I: The server installed the following features: [el-3.0, jsp-2.3, servlet-4.0, springBoot-2.0, ssl-1.0, transportSecurity-1.0, websocket-1.1].\n[AUDIT   ] CWWKF0011I: The defaultServer server is ready to run a smarter planet. The defaultServer server started in 33.103 seconds.\n```\n\nThis shows that the Spring Boot application is successfully started.\n\n### Access the application\n\n- To access the application, open the browser and access http://localhost:9080/greeting?name=John.\n\nYou will see something like below.\n\n```bash\n{\"id\":2,\"content\":\"Welcome to Cloudnative bootcamp !!! Hello, John :)\"}\n```\n\n**Container Image Registry**\n\nContainer Image Registry is a place where you can store the container images. They can be public or private registries. They can be hosted by third party as well. In this lab, we are using DockerHub.\n\n### Pushing an image to a Registry\n\nLet us now push the image to docker hub registry. Before pushing the image to the registry, one needs to login.\n\n7. Login to Docker Hub using your credentials.\n\nOnce logged in we need to take the image for the registry.\n\n8. Tag your image for the image registry. Using the `same name and tag from before`. (*NOTE: the command has both the source tag and repository destination tag in it.*)\n\n9. Now push the image to the registry. This allows you to share images to a registry.\n\nIf everything goes fine, you will see something like below.\n\n```bash\n$ <command>\nThe push refers to repository [docker.io/<repository_name>/greeting]\n2e4d09cd03a2: Pushed\nd862b7819235: Pushed\na9212239031e: Pushed\n4be784548734: Pushed\na43c287826a1: Mounted from library/ibmjava\ne936f9f1df3e: Mounted from library/ibmjava\n92d3f22d44f3: Mounted from library/ibmjava\n10e46f329a25: Mounted from library/ibmjava\n24ab7de5faec: Mounted from library/ibmjava\n1ea5a27b0484: Mounted from library/ibmjava\nv1.0.0: digest: sha256:21c2034646a31a18b053546df00d9ce2e0871bafcdf764f872a318a54562e6b4 size: 2415\n```\n\nOnce the push is successful, your image will be residing in the registry.\n\n### Clean Up\n\n10. Stop the `greeting` container.\n\n11. Remove the container.\n\n12. Remove the image. (*NOTE: You will need the image_id to remove it.*)\n\n### Pulling an image from the registry\n\nSometimes, you may need the images that are residing on your registry. Or you may want to use some public images out there. Then, we need to pull the image from the registry.\n\n13. Pull the image `greeting` from the registry, \n\nIf it successfully got pulled, we will see something like below.\n\n```bash\nddcb5f219ce2: Pull complete\ne3371bbd24a0: Pull complete\n49d2efb3c01b: Pull complete\nDigest: sha256:21c2034646a31a18b053546df00d9ce2e0871bafcdf764f872a318a54562e6b4\nStatus: Downloaded newer image for <repository_name>/greeting:v1.0.0\ndocker.io/<repository_name>/greeting:v1.0.0\n```\n\n## Conclusion\n\nYou have successfully completed this lab! Let's take a look at what you learned and did today:\n\n- Learned about Dockerfile.\n- Learned about docker images.\n- Learned about docker containers.\n- Learned about multi-stage docker builds.\n- Ran the Greetings service on Docker.\n\nCongratulations !!!\n\nCheck out the [Solution](./solution/)\n","type":"Mdx","contentDigest":"64a53b19d7808bbbadb4a80396aafd3e","counter":585,"owner":"gatsby-plugin-mdx"},"exports":[],"rawBody":"---\ntitle: Lab - Docker\ndescription: Lab introducting docker concepts\n---\n\n<AnchorLinks>\n  <AnchorLink>Introduction</AnchorLink>\n  <AnchorLink>Prerequisites</AnchorLink>\n  <AnchorLink>Working with docker</AnchorLink>\n  <AnchorLink>Get the sample application</AnchorLink>\n  <AnchorLink>Run the application on Docker</AnchorLink>\n    <AnchorLinks small>\n      <AnchorLink>Build the docker image</AnchorLink>\n      <AnchorLink>Run the docker container</AnchorLink>\n      <AnchorLink>Access the application</AnchorLink>\n      <AnchorLink>Pushing an image to a Registry</AnchorLink>\n      <AnchorLink>Clean Up</AnchorLink>\n      <AnchorLink>Pulling an image from the registry</AnchorLink>\n    </AnchorLinks>\n  <AnchorLink>Conclusion</AnchorLink>\n</AnchorLinks>\n\n## Introduction\n\nIn this lab, you will learn about how to use docker and how to run applications using docker.\n\n## Prerequisites\n\n- Create a [DockerHub account](https://hub.docker.com/). This account is needed to push images to docker registry. Also create a repository following the instructions [here](https://docs.docker.com/docker-hub/repos/).\n- You need to install [Docker](https://www.docker.com/) in your environment. Follow the instructions [here](https://docs.docker.com/docker-for-mac/install/) to install it on Mac and [here](https://docs.docker.com/docker-for-windows/install/) to install it on Windows.\n\n## Working with docker\n\nBefore proceeding, make sure docker is properly installed on your system. \n\n1. Please verify your Docker by looking up the version.\n\nIf it is installed, you will see a version number something similar to below.\n\n```bash\n$ <command>\nDocker version 19.03.0-beta3, build c55e026\n```\n\n** Running a hello-world container **\n\nLet us start with a `hello-world` container. \n\n2. run a `hello-world` container.\n\nIf it is successfully run, you will see something like below.\n\n```bash\n$ <command>\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n1b930d010525: Pull complete\nDigest: sha256:41a65640635299bab090f783209c1e3a3f11934cf7756b09cb2f1e02147c6ed8\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\n```\n\nSince, `hello-world` image is not existing locally, it is pulled from `library/hello-world`. But if it is already existing, docker will not pull it every time but rather use the existing one.\n\nThis image is pulled from https://hub.docker.com/_/hello-world. Docker hub is a repository used to store docker images. Similarly, you can use your own registries to store images. For example, IBM Cloud provides you a container registry.\n\n**Verifying the hello-world image**\n\n3. Now verify if an image is existing in your system locally.\n\nYou will then see something like below.\n\n```bash\n$ <command>\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nhello-world         latest              fce289e99eb9        5 months ago        1.84kB\n```\n\n## Get the sample application\n\nTo get the sample application, you will need to clone it from github.\n\n```bash\n# Clone the sample app\ngit clone https://github.com/ibm-cloud-architecture/cloudnative_sample_app.git\n\n# Go to the project's root folder\ncd cloudnative_sample_app/\n```\n\n## Run the application on Docker\n\n### Build the docker image\n\nLet's take look at the docker file before building it.\n\n```\nFROM maven:3.3-jdk-8 as builder\n\nCOPY . .\nRUN mvn clean install\n\nFROM openliberty/open-liberty:springBoot2-ubi-min as staging\n\nCOPY --chown=1001:0 --from=builder /target/cloudnativesampleapp-1.0-SNAPSHOT.jar /config/app.jar\nRUN springBootUtility thin \\\n    --sourceAppPath=/config/app.jar \\\n    --targetThinAppPath=/config/dropins/spring/thinClinic.jar \\\n    --targetLibCachePath=/opt/ol/wlp/usr/shared/resources/lib.index.cache\n\n```\n\n- Using the `FROM` instruction, we provide the name and tag of an image that should be used as our base. This must always be the first instruction in the Dockerfile.\n- Using `COPY` instruction, we copy new contents from the source filesystem to the container filesystem.\n- `RUN` instruction executes the commands.\n\nThis Dockerfile leverages multi-stage builds, which lets you create multiple stages in your Dockerfile to do certain tasks.\n\nIn our case, we have two stages.\n\n- The first one uses `maven:3.3-jdk-8` as its base image to download and build the project and its dependencies using Maven.\n- The second stage uses `openliberty/open-liberty:springBoot2-ubi-min` as its base image to run the compiled code from the previous stage.\n\nThe advantage of using the multi-stage builds approach is that the resulting image only uses the base image of the last stage. Meaning that in our case, we will only end up with the `openliberty/open-liberty:springBoot2-ubi-min` as our base image, which is much tinier than having an image that has both Maven and the JRE.\n\nBy using the multi-stage builds approach when it makes sense to use it, you will end up with much lighter and easier to maintain images, which can save you space on your Docker Registry. Also, having tinier images usually means less resource consumption on your worker nodes, which can result cost-savings.\n\n\nOnce, you have the docker file ready, the next step is to build it. The `build` command allows you to build a docker image which you can later run as a container.\n\n1. Build the docker file with the `image_name` of `greeting` and give it a `image_tag` of `v1.0.0` and build it using the current context.\n\nYou will see something like below:\n\n``` bash\n$ <command>\nSending build context to Docker daemon  22.17MB\nStep 1/6 : FROM maven:3.3-jdk-8 as builder\n ---> 9997d8483b2f\nStep 2/6 : COPY . .\n ---> c198e3e54023\nStep 3/6 : RUN mvn clean install\n ---> Running in 24378df7f87b\n[INFO] Scanning for projects...\n.\n.\n.\n[INFO] Installing /target/cloudnativesampleapp-1.0-SNAPSHOT.jar to /root/.m2/repository/projects/cloudnativesampleapp/1.0-SNAPSHOT/cloudnativesampleapp-1.0-SNAPSHOT.jar\n[INFO] Installing /pom.xml to /root/.m2/repository/projects/cloudnativesampleapp/1.0-SNAPSHOT/cloudnativesampleapp-1.0-SNAPSHOT.pom\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 44.619 s\n[INFO] Finished at: 2020-04-06T16:07:04+00:00\n[INFO] Final Memory: 38M/385M\n[INFO] ------------------------------------------------------------------------\nRemoving intermediate container 24378df7f87b\n ---> cc5620334e1b\nStep 4/6 : FROM openliberty/open-liberty:springBoot2-ubi-min as staging\n ---> 021530b0b3cb\nStep 5/6 : COPY --chown=1001:0 --from=builder /target/cloudnativesampleapp-1.0-SNAPSHOT.jar /config/app.jar\n ---> dbc81e5f4691\nStep 6/6 : RUN springBootUtility thin     --sourceAppPath=/config/app.jar     --targetThinAppPath=/config/dropins/spring/thinClinic.jar     --targetLibCachePath=/opt/ol/wlp/usr/shared/resources/lib.index.cache\n ---> Running in 8ea80b5863cb\nCreating a thin application from: /config/app.jar\nLibrary cache: /opt/ol/wlp/usr/shared/resources/lib.index.cache\nThin application: /config/dropins/spring/thinClinic.jar\nRemoving intermediate container 8ea80b5863cb\n ---> a935a129dcb2\nSuccessfully built a935a129dcb2\nSuccessfully tagged greeting:v1.0.0\n```\n\n2. Next, verify your newly built image\n\nThe output will be as follows.\n\n```bash\n$ <command>\nREPOSITORY                           TAG                   IMAGE ID            CREATED             SIZE\ngreeting                             v1.0.0                89bd7032fdee        51 seconds ago      537MB\nopenliberty/open-liberty             springBoot2-ubi-min   bcfcb2c5ce16        6 days ago          480MB\nhello-world                          latest                f9cad508cb4c        5 months ago        1.84kB\n```\n\n### Run the docker container\n\nNow let's try running the docker container. Run it with the following parameters:\n\n3. Expose port `9080`. Run it in the background in detached mode. Give the container the name of `greeting`.\n\nOnce done, you will have something like below.\n\n```bash\n$ <command>\nbc2dc95a6bd1f51a226b291999da9031f4443096c1462cb3fead3df36613b753\n```\n\nAlso, docker cannot create two containers with the same name. If you try to run the same container having the same name again, you will see something like below.\n\n```bash\n$ <command>\ndocker: Error response from daemon: Conflict. The container name \"/greeting\" is already in use by container \"a74b91789b29af6e7be92b30d0e68eef852bfb24336a44ef1485bb58becbd664\". You have to remove (or rename) that container to be able to reuse that name.\nSee 'docker run --help'.\n```\n\nIt is a good practice to name your containers. Naming helps you to discover your service easily.\n\n4. List all the running containers.\n\nYou will see something like below.\n\n```bash\n$ <command>\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                              NAMES\nbc2dc95a6bd1        greeting:v1.0.0     \"/opt/ol/helpers/run…\"   18 minutes ago      Up 18 minutes       0.0.0.0:9080->9080/tcp, 9443/tcp   greeting\n```\n\n5. Let's inspect the running container.\n\nBy inspecting the container, you can access detailed information about the container. By using this command, you get to know the details about network settings, volumes, configs, state etc.\n\nIf we consider our container, it is as follows. You can see lot of information about the `greeting` container.\n\n```bash\n$ <command>\n[\n    {\n        \"Id\": \"bc2dc95a6bd1f51a226b291999da9031f4443096c1462cb3fead3df36613b753\",\n        \"Created\": \"2019-08-30T16:56:40.2081539Z\",\n        \"Path\": \"/opt/ol/helpers/runtime/docker-server.sh\",\n        \"Args\": [\n            \"/opt/ol/wlp/bin/server\",\n            \"run\",\n            \"defaultServer\"\n        ],\n        \"State\": {\n            \"Status\": \"running\",\n            \"Running\": true,\n            \"Paused\": false,\n            \"Restarting\": false,\n            \"OOMKilled\": false,\n            \"Dead\": false,\n            \"Pid\": 27548,\n            \"ExitCode\": 0,\n            \"Error\": \"\",\n            \"StartedAt\": \"2019-08-30T16:56:41.0927889Z\",\n            \"FinishedAt\": \"0001-01-01T00:00:00Z\"\n        },\n        ..........\n        ..........\n        ..........\n    }\n]\n```\n\n6. Get the logs of the `greeting` container.\n\nIt helps you to access the logs of your container. It allows you to debug the container if it fails. It also lets you to know what is happening with your application.\n\nAt the end, you will see something like below.\n\n```bash\n.   ____          _            __ _ _\n/\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n\\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n'  |____| .__|_| |_|_| |_\\__, | / / / /\n=========|_|==============|___/=/_/_/_/\n:: Spring Boot ::        (v2.1.7.RELEASE)\n2019-08-30 16:57:01.494  INFO 1 --- [ecutor-thread-5] application.SBApplication                : Starting SBApplication on bc2dc95a6bd1 with PID 1 (/opt/ol/wlp/usr/servers/defaultServer/dropins/spring/thinClinic.jar started by default in /opt/ol/wlp/output/defaultServer)\n2019-08-30 16:57:01.601  INFO 1 --- [ecutor-thread-5] application.SBApplication                : No active profile set, falling back to default profiles: default\n[AUDIT   ] CWWKT0016I: Web application available (default_host): http://bc2dc95a6bd1:9080/\n2019-08-30 16:57:09.641  INFO 1 --- [cutor-thread-25] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 7672 ms\n2019-08-30 16:57:12.279  INFO 1 --- [ecutor-thread-5] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 15 endpoint(s) beneath base path '/actuator'\n2019-08-30 16:57:12.974  INFO 1 --- [ecutor-thread-5] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'\n2019-08-30 16:57:13.860  INFO 1 --- [ecutor-thread-5] d.s.w.p.DocumentationPluginsBootstrapper : Context refreshed\n2019-08-30 16:57:13.961  INFO 1 --- [ecutor-thread-5] d.s.w.p.DocumentationPluginsBootstrapper : Found 1 custom documentation plugin(s)\n2019-08-30 16:57:14.020  INFO 1 --- [ecutor-thread-5] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references\n2019-08-30 16:57:14.504  INFO 1 --- [ecutor-thread-5] application.SBApplication                : Started SBApplication in 17.584 seconds (JVM running for 33.368)\n[AUDIT   ] CWWKZ0001I: Application thinClinic started in 21.090 seconds.\n[AUDIT   ] CWWKF0012I: The server installed the following features: [el-3.0, jsp-2.3, servlet-4.0, springBoot-2.0, ssl-1.0, transportSecurity-1.0, websocket-1.1].\n[AUDIT   ] CWWKF0011I: The defaultServer server is ready to run a smarter planet. The defaultServer server started in 33.103 seconds.\n```\n\nThis shows that the Spring Boot application is successfully started.\n\n### Access the application\n\n- To access the application, open the browser and access http://localhost:9080/greeting?name=John.\n\nYou will see something like below.\n\n```bash\n{\"id\":2,\"content\":\"Welcome to Cloudnative bootcamp !!! Hello, John :)\"}\n```\n\n**Container Image Registry**\n\nContainer Image Registry is a place where you can store the container images. They can be public or private registries. They can be hosted by third party as well. In this lab, we are using DockerHub.\n\n### Pushing an image to a Registry\n\nLet us now push the image to docker hub registry. Before pushing the image to the registry, one needs to login.\n\n7. Login to Docker Hub using your credentials.\n\nOnce logged in we need to take the image for the registry.\n\n8. Tag your image for the image registry. Using the `same name and tag from before`. (*NOTE: the command has both the source tag and repository destination tag in it.*)\n\n9. Now push the image to the registry. This allows you to share images to a registry.\n\nIf everything goes fine, you will see something like below.\n\n```bash\n$ <command>\nThe push refers to repository [docker.io/<repository_name>/greeting]\n2e4d09cd03a2: Pushed\nd862b7819235: Pushed\na9212239031e: Pushed\n4be784548734: Pushed\na43c287826a1: Mounted from library/ibmjava\ne936f9f1df3e: Mounted from library/ibmjava\n92d3f22d44f3: Mounted from library/ibmjava\n10e46f329a25: Mounted from library/ibmjava\n24ab7de5faec: Mounted from library/ibmjava\n1ea5a27b0484: Mounted from library/ibmjava\nv1.0.0: digest: sha256:21c2034646a31a18b053546df00d9ce2e0871bafcdf764f872a318a54562e6b4 size: 2415\n```\n\nOnce the push is successful, your image will be residing in the registry.\n\n### Clean Up\n\n10. Stop the `greeting` container.\n\n11. Remove the container.\n\n12. Remove the image. (*NOTE: You will need the image_id to remove it.*)\n\n### Pulling an image from the registry\n\nSometimes, you may need the images that are residing on your registry. Or you may want to use some public images out there. Then, we need to pull the image from the registry.\n\n13. Pull the image `greeting` from the registry, \n\nIf it successfully got pulled, we will see something like below.\n\n```bash\nddcb5f219ce2: Pull complete\ne3371bbd24a0: Pull complete\n49d2efb3c01b: Pull complete\nDigest: sha256:21c2034646a31a18b053546df00d9ce2e0871bafcdf764f872a318a54562e6b4\nStatus: Downloaded newer image for <repository_name>/greeting:v1.0.0\ndocker.io/<repository_name>/greeting:v1.0.0\n```\n\n## Conclusion\n\nYou have successfully completed this lab! Let's take a look at what you learned and did today:\n\n- Learned about Dockerfile.\n- Learned about docker images.\n- Learned about docker containers.\n- Learned about multi-stage docker builds.\n- Ran the Greetings service on Docker.\n\nCongratulations !!!\n\nCheck out the [Solution](./solution/)\n","frontmatter":{"title":"Lab - Docker","description":"Lab introducting docker concepts"},"fileAbsolutePath":"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/src/pages/lectures/containers/activities/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550"]}