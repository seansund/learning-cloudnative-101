{"componentChunkName":"component---src-pages-lectures-kube-core-concepts-index-mdx","path":"/lectures/kube-core-concepts/","result":{"pageContext":{"frontmatter":{"title":"Kubernetes Core Concepts","description":"Core Concepts of Kubernetes"},"relativePagePath":"/lectures/kube-core-concepts/index.mdx","titleType":"page","MdxNode":{"id":"7ce7824f-571a-5fb6-bea6-21feff3250b2","children":[],"parent":"537e3d28-f556-52e8-bca0-67e32e5fc923","internal":{"content":"---\ntitle: Kubernetes Core Concepts\ndescription: Core Concepts of Kubernetes\n---\n\n<AnchorLinks small>\n  <AnchorLink>Kubernetes API Primitives</AnchorLink>\n  <AnchorLink>Creating Pods</AnchorLink>\n  <AnchorLink>Namespaces</AnchorLink>\n</AnchorLinks>\n\n\n# Kubernetes API Primitives\n\nKubernetes API primitive, also known as Kubernetes objects, are the basic building blocks of any application running in Kubernetes\n\nExamples:\n- Pod\n- Node\n- Service\n- ServiceAccount\n\nTwo primary members\n- Spec, desired state\n- Status, current state\n\n## Resources\n\n**OpenShift**\n- [Pods](https://docs.openshift.com/container-platform/4.3/nodes/pods/nodes-pods-using.html)\n- [Nodes](https://docs.openshift.com/container-platform/4.3/nodes/nodes/nodes-nodes-viewing.html)\n\n**IKS**\n- [Objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/)\n- [Kube Basics](https://kubernetes.io/docs/tutorials/kubernetes-basics/)\n\n\n## References\n\n<Tabs>\n\n<Tab label=\"OpenShift\">\n\n**Prints all API Resources**\n```language=bash\noc api-resources\n```\n**Prints all API Resources with their verbs.**\n```\noc api-resources -o wide\n```\n**Prints all API Resources names only**\n```\noc api-resources -o name\n```\n**Explain the Resource specification**\n```\noc explain Pod.spec\n```\n**Getting a list of specific objects**\n```\noc get nodes,ns,po,deploy,svc\n```\n**Describing the resources**\n```\noc describe node \n```\n\n</Tab>\n\n<Tab label=\"IKS\">\n\n**Prints all API Resources**\n```\nkubectl api-resources\n```\n**Prints all API Resources with their verbs.**\n```\nkubectl api-resources -o wide\n```\n**Prints all API Resources names only**\n```\nkubectl api-resources -o name\n```\n**Explain the Resource specification**\n```\nkubectl explain Pod.spec\n```\n**Getting a list of specific objects**\n```\nkubectl get nodes,ns,po,deploy,svc\n```\n**Describing the resources**\n```\nkubectl describe node\n```\n\n</Tab>\n\n</Tabs>\n\n# Creating Pods\nA Pod is the basic execution unit of a Kubernetes application–the smallest and simplest unit in the Kubernetes object model that you create or deploy. A Pod represents processes running on your Cluster.\n\nA Pod encapsulates an application’s container (or, in some cases, multiple containers), storage resources, a unique network IP, and options that govern how the container(s) should run. A Pod represents a unit of deployment: a single instance of an application in Kubernetes, which might consist of either a single container or a small number of containers that are tightly coupled and that share resources.\n\n## Resources\n\n**OpenShift**\n- [About Pods](https://docs.openshift.com/container-platform/4.3/nodes/pods/nodes-pods-using.html)\n- [Cluster Configuration for Pods](https://docs.openshift.com/container-platform/4.3/nodes/pods/nodes-pods-configuring.html)\n- [Pod Autoscaling](https://docs.openshift.com/container-platform/4.3/nodes/pods/nodes-pods-autoscaling.html)\n\n**IKS**\n- [Pod Overview](https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/)\n- [Pod Lifecycle](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/)\n- [Pod Usage](https://kubernetes.io/docs/concepts/workloads/pods/pod/)\n\n## References\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-pod\n  labels:\n    app: myapp\nspec:\n  containers:\n    - name: myapp-container\n      image: busybox\n      command: [\"sh\", \"-c\", \"echo Hello Kubernetes! && sleep 3600\"]\n```\n\n<Tabs>\n<Tab label=\"OpenShift\">\n\n** Create Pod using yaml file **\n```\noc apply -f pod.yaml\n``` \n** Get Current Pods in Project **\n```\noc get pods\n```\n** Get Pods with their IP and node location **\n```\noc get pods -o wide\n```\n** Get Pod's Description **\n``` \noc describe pod myapp-pod\n```\n** Get the logs  **\n```\noc logs myapp-pod\n```\n** Delete a Pod **\n```\noc delete pod myapp-pod\n```\n</Tab>\n\n<Tab label=\"IKS\">\n\n** Create Pod using yaml file **\n```\nkubectl apply -f pod.yaml\n```\n** Get Current Pods in Project **\n```\nkubectl get pods\n``` \n** Get Pods with their IP and node location **\n```\nkubectl get pods -o wide\n```\n** Get Pod's Description **\n``` \nkubectl describe pod myapp-pod\n```\n** Get the logs  **\n```\nkubectl logs myapp-pod\n```\n** Delete a Pod **\n```\nkubectl delete pod myapp-pod\n```\n\n</Tab>\n\n</Tabs>\n\n# Projects/Namespaces\n\nNamespaces are intended for use in environments with many users spread across multiple teams, or projects.\n\nNamespaces provide a scope for names. Names of resources need to be unique within a namespace, but not across namespaces.\n\nNamespaces are a way to divide cluster resources between multiple users (via resource quota).\n\nIt is not necessary to use multiple namespaces just to separate slightly different resources, such as different versions of the same software: use labels to distinguish resources within the same namespace. In practice namespaces are used to deploy different versions based on stages of the CICD pipeline (dev, test, stage, prod)\n\n## Resources\n\n**OpenShift**\n- [Working With Projects](https://docs.openshift.com/container-platform/4.3/applications/projects/working-with-projects.html)\n- [Creating Projects](https://docs.openshift.com/container-platform/4.3/cli_reference/openshift_cli/getting-started-cli.html#creating-a-project)\n- [Configure Project Creation](https://docs.openshift.com/container-platform/4.3/applications/projects/configuring-project-creation.html)\n\n**IKS**\n- [Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/)\n\n## References:\n\n```yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: dev\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-pod\n  namespace: dev\nspec:\n  containers:\n    - name: myapp-container\n      image: busybox\n      command: [\"sh\", \"-c\", \"echo Hello Kubernetes! && sleep 3600\"]\n```\n\n<Tabs>\n\n<Tab label=\"OpenShift\">\n\n**Getting all namespaces/projects** \n```\noc projects\n```\n**Create a new Project** \n```\noc new-project dev\n```\n**Viewing Current Project**\n```\noc project\n```\n**Setting Namespace in Context**\n```\noc project dev\n```\n**Viewing Project Status**\n```\noc status\n```\n\n</Tab>\n\n<Tab label=\"IKS\">\n\n**Getting all namespaces** \n```\nkubectl get namespaces\n```\n**Create a new namespace called bar**\n``` \nkubectl create ns dev\n```\n**Setting Namespace in Context**\n``` \nkubectl config set-context --current --namespace=dev\n```\n</Tab>\n\n</Tabs>\n","type":"Mdx","contentDigest":"87170f81eb4256bbf7aea173c6cf186b","counter":577,"owner":"gatsby-plugin-mdx"},"exports":[],"rawBody":"---\ntitle: Kubernetes Core Concepts\ndescription: Core Concepts of Kubernetes\n---\n\n<AnchorLinks small>\n  <AnchorLink>Kubernetes API Primitives</AnchorLink>\n  <AnchorLink>Creating Pods</AnchorLink>\n  <AnchorLink>Namespaces</AnchorLink>\n</AnchorLinks>\n\n\n# Kubernetes API Primitives\n\nKubernetes API primitive, also known as Kubernetes objects, are the basic building blocks of any application running in Kubernetes\n\nExamples:\n- Pod\n- Node\n- Service\n- ServiceAccount\n\nTwo primary members\n- Spec, desired state\n- Status, current state\n\n## Resources\n\n**OpenShift**\n- [Pods](https://docs.openshift.com/container-platform/4.3/nodes/pods/nodes-pods-using.html)\n- [Nodes](https://docs.openshift.com/container-platform/4.3/nodes/nodes/nodes-nodes-viewing.html)\n\n**IKS**\n- [Objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/)\n- [Kube Basics](https://kubernetes.io/docs/tutorials/kubernetes-basics/)\n\n\n## References\n\n<Tabs>\n\n<Tab label=\"OpenShift\">\n\n**Prints all API Resources**\n```language=bash\noc api-resources\n```\n**Prints all API Resources with their verbs.**\n```\noc api-resources -o wide\n```\n**Prints all API Resources names only**\n```\noc api-resources -o name\n```\n**Explain the Resource specification**\n```\noc explain Pod.spec\n```\n**Getting a list of specific objects**\n```\noc get nodes,ns,po,deploy,svc\n```\n**Describing the resources**\n```\noc describe node \n```\n\n</Tab>\n\n<Tab label=\"IKS\">\n\n**Prints all API Resources**\n```\nkubectl api-resources\n```\n**Prints all API Resources with their verbs.**\n```\nkubectl api-resources -o wide\n```\n**Prints all API Resources names only**\n```\nkubectl api-resources -o name\n```\n**Explain the Resource specification**\n```\nkubectl explain Pod.spec\n```\n**Getting a list of specific objects**\n```\nkubectl get nodes,ns,po,deploy,svc\n```\n**Describing the resources**\n```\nkubectl describe node\n```\n\n</Tab>\n\n</Tabs>\n\n# Creating Pods\nA Pod is the basic execution unit of a Kubernetes application–the smallest and simplest unit in the Kubernetes object model that you create or deploy. A Pod represents processes running on your Cluster.\n\nA Pod encapsulates an application’s container (or, in some cases, multiple containers), storage resources, a unique network IP, and options that govern how the container(s) should run. A Pod represents a unit of deployment: a single instance of an application in Kubernetes, which might consist of either a single container or a small number of containers that are tightly coupled and that share resources.\n\n## Resources\n\n**OpenShift**\n- [About Pods](https://docs.openshift.com/container-platform/4.3/nodes/pods/nodes-pods-using.html)\n- [Cluster Configuration for Pods](https://docs.openshift.com/container-platform/4.3/nodes/pods/nodes-pods-configuring.html)\n- [Pod Autoscaling](https://docs.openshift.com/container-platform/4.3/nodes/pods/nodes-pods-autoscaling.html)\n\n**IKS**\n- [Pod Overview](https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/)\n- [Pod Lifecycle](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/)\n- [Pod Usage](https://kubernetes.io/docs/concepts/workloads/pods/pod/)\n\n## References\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-pod\n  labels:\n    app: myapp\nspec:\n  containers:\n    - name: myapp-container\n      image: busybox\n      command: [\"sh\", \"-c\", \"echo Hello Kubernetes! && sleep 3600\"]\n```\n\n<Tabs>\n<Tab label=\"OpenShift\">\n\n** Create Pod using yaml file **\n```\noc apply -f pod.yaml\n``` \n** Get Current Pods in Project **\n```\noc get pods\n```\n** Get Pods with their IP and node location **\n```\noc get pods -o wide\n```\n** Get Pod's Description **\n``` \noc describe pod myapp-pod\n```\n** Get the logs  **\n```\noc logs myapp-pod\n```\n** Delete a Pod **\n```\noc delete pod myapp-pod\n```\n</Tab>\n\n<Tab label=\"IKS\">\n\n** Create Pod using yaml file **\n```\nkubectl apply -f pod.yaml\n```\n** Get Current Pods in Project **\n```\nkubectl get pods\n``` \n** Get Pods with their IP and node location **\n```\nkubectl get pods -o wide\n```\n** Get Pod's Description **\n``` \nkubectl describe pod myapp-pod\n```\n** Get the logs  **\n```\nkubectl logs myapp-pod\n```\n** Delete a Pod **\n```\nkubectl delete pod myapp-pod\n```\n\n</Tab>\n\n</Tabs>\n\n# Projects/Namespaces\n\nNamespaces are intended for use in environments with many users spread across multiple teams, or projects.\n\nNamespaces provide a scope for names. Names of resources need to be unique within a namespace, but not across namespaces.\n\nNamespaces are a way to divide cluster resources between multiple users (via resource quota).\n\nIt is not necessary to use multiple namespaces just to separate slightly different resources, such as different versions of the same software: use labels to distinguish resources within the same namespace. In practice namespaces are used to deploy different versions based on stages of the CICD pipeline (dev, test, stage, prod)\n\n## Resources\n\n**OpenShift**\n- [Working With Projects](https://docs.openshift.com/container-platform/4.3/applications/projects/working-with-projects.html)\n- [Creating Projects](https://docs.openshift.com/container-platform/4.3/cli_reference/openshift_cli/getting-started-cli.html#creating-a-project)\n- [Configure Project Creation](https://docs.openshift.com/container-platform/4.3/applications/projects/configuring-project-creation.html)\n\n**IKS**\n- [Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/)\n\n## References:\n\n```yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: dev\n```\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-pod\n  namespace: dev\nspec:\n  containers:\n    - name: myapp-container\n      image: busybox\n      command: [\"sh\", \"-c\", \"echo Hello Kubernetes! && sleep 3600\"]\n```\n\n<Tabs>\n\n<Tab label=\"OpenShift\">\n\n**Getting all namespaces/projects** \n```\noc projects\n```\n**Create a new Project** \n```\noc new-project dev\n```\n**Viewing Current Project**\n```\noc project\n```\n**Setting Namespace in Context**\n```\noc project dev\n```\n**Viewing Project Status**\n```\noc status\n```\n\n</Tab>\n\n<Tab label=\"IKS\">\n\n**Getting all namespaces** \n```\nkubectl get namespaces\n```\n**Create a new namespace called bar**\n``` \nkubectl create ns dev\n```\n**Setting Namespace in Context**\n``` \nkubectl config set-context --current --namespace=dev\n```\n</Tab>\n\n</Tabs>\n","frontmatter":{"title":"Kubernetes Core Concepts","description":"Core Concepts of Kubernetes"},"fileAbsolutePath":"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/src/pages/lectures/kube-core-concepts/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550"]}