{"componentChunkName":"component---src-pages-lectures-kube-pod-design-index-mdx","path":"/lectures/kube-pod-design/","result":{"pageContext":{"frontmatter":{"title":"Pod Design","description":"Pod Design in Kubernetes"},"relativePagePath":"/lectures/kube-pod-design/index.mdx","titleType":"page","MdxNode":{"id":"b3c8cecf-9393-5fea-835e-e84515dab591","children":[],"parent":"cdf71e3a-e5b6-5e61-bd50-7fc2855d6d37","internal":{"content":"---\ntitle: Pod Design\ndescription:  Pod Design in Kubernetes\n---\n\n<AnchorLinks small>\n  <AnchorLink>Labels, Selectors, and Annotations</AnchorLink>\n  <AnchorLink>Deployments</AnchorLink>\n  <AnchorLink>Deployments rolling updates and rollback</AnchorLink>\n  <AnchorLink>Jobs and CronJobs</AnchorLink>\n  <AnchorLink>Activities</AnchorLink>\n</AnchorLinks>\n\n# Labels, Selectors, and Annotations\n\nLabels are key/value pairs that are attached to objects, such as pods. Labels are intended to be used to specify identifying attributes of objects that are meaningful and relevant to users, but do not directly imply semantics to the core system. Labels can be used to organize and to select subsets of objects. Labels can be attached to objects at creation time and subsequently added and modified at any time. Each object can have a set of key/value labels defined. Each Key must be unique for a given object.\n\nYou can use Kubernetes annotations to attach arbitrary non-identifying metadata to objects. Clients such as tools and libraries can retrieve this metadata.\n\nYou can use either labels or annotations to attach metadata to Kubernetes objects. Labels can be used to select objects and to find collections of objects that satisfy certain conditions. In contrast, annotations are not used to identify and select objects. The metadata in an annotation can be small or large, structured or unstructured, and can include characters not permitted by labels.\n\n## Resources\n\n**OpenShift**\n- [CLI Label Commands](https://docs.openshift.com/enterprise/3.0/cli_reference/basic_cli_operations.html#application-modification-cli-operations)\n\n**IKS**\n- [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)\n- [Annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/)\n\n\n## References\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\n  labels:\n    app: foo\n    tier: frontend\n    env: dev\n  annotations:\n    imageregistry: \"https://hub.docker.com/\"\n    gitrepo: \"https://github.com/csantanapr/knative\"\nspec:\n  containers:\n  - name: app\n    image: bitnami/nginx\n```\n\n\n<Tabs>\n<Tab label=\"OpenShift\">\n\n** Change Labels on Objects **\n```\noc label pod my-pod boot=camp\n```\n **Getting Pods based on their labels.**\n```\noc get pods --show-labels\n```\n```\noc get pods -L tier,env\n```\n```\noc get pods -l app\n```\n```\noc get pods -l tier=frontend\n```\n```\noc get pods -l 'env=dev,tier=frontend'\n```\n```\noc get pods -l 'env in (dev, test)'\n```\n```\noc get pods -l 'tier!=backend'\n```\n```\noc get pods -l 'env,env notin (prod)'\n```\n**Delete the Pod.**\n```\noc delete pod my-pod\n```\n\n</Tab>\n\n<Tab label=\"IKS\">\n\n** Change Labels on Objects **\n```\nkubectl label pod my-pod boot=camp\n```\n **Getting Pods based on their labels.**\n```\nkubectl get pods --show-labels\n```\n```\nkubectl get pods -L tier,env\n```\n```\nkubectl get pods -l app\n```\n```\nkubectl get pods -l tier=frontend\n```\n```\nkubectl get pods -l 'env=dev,tier=frontend'\n```\n```\nkubectl get pods -l 'env in (dev, test)'\n```\n```\nkubectl get pods -l 'tier!=backend'\n```\n```\nkubectl get pods -l 'env,env notin (prod)'\n```\n**Delete the Pod.**\n```\nkubectl delete pod my-pod\n```\n\n</Tab>\n\n</Tabs>\n\n# Deployments\n\nA Deployment provides declarative updates for Pods and ReplicaSets.\n\nYou describe a desired state in a Deployment, and the Deployment Controller changes the actual state to the desired state at a controlled rate. You can define Deployments to create new ReplicaSets, or to remove existing Deployments and adopt all their resources with new Deployments.\n\nThe following are typical use cases for Deployments:\n- Create a Deployment to rollout a ReplicaSet. The ReplicaSet creates Pods in the background. Check the status of the rollout to see if it succeeds or not.\n- Declare the new state of the Pods by updating the PodTemplateSpec of the Deployment. A new ReplicaSet is created and the Deployment manages moving the Pods from the old ReplicaSet to the new one at a controlled rate. Each new ReplicaSet updates the revision of the Deployment.\n- Rollback to an earlier Deployment revision if the current state of the Deployment is not stable. Each rollback updates the revision of the Deployment.\n- Scale up the Deployment to facilitate more load.\n- Pause the Deployment to apply multiple fixes to its PodTemplateSpec and then resume it to start a new rollout.\n- Use the status of the Deployment as an indicator that a rollout has stuck.\n- Clean up older ReplicaSets that you don’t need anymore.\n\n\n## Resources\n\n**OpenShift**\n\n- [Deployments](https://docs.openshift.com/container-platform/4.3/applications/deployments/what-deployments-are.html)\n- [Managing Deployment Processes](https://docs.openshift.com/container-platform/4.3/applications/deployments/managing-deployment-processes.html)\n- [DeploymentConfig Strategies](https://docs.openshift.com/container-platform/4.3/applications/deployments/deployment-strategies.html)\n- [Route Based Deployment Strategies](https://docs.openshift.com/container-platform/4.3/applications/deployments/route-based-deployment-strategies.html)\n\n**IKS**\n\n- [Deployments](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/)\n- [Scaling Deployments](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment)\n\n## References\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: bitnami/nginx:1.16.0\n        ports:\n        - containerPort: 8080\n```\n\n<Tabs>\n<Tab label=\"OpenShift\">\n\n** Creates a Deployment **\n```\noc apply -f deployment.yaml\n```\n** Gets Deployments **\n```\noc get deployment my-deployment\n```\n** Gets the deployments description **\n```\noc describe deployment my-deployment\n```\n** Edit the deployment **\n```\noc edit deployment my-deployment\n```\n** Scale the deployment **\n```\noc scale deployment/my-deployment --replicas=3\n```\n** Delete the deployment **\n```\noc delete deployment my-deployment\n```\n</Tab>\n\n<Tab label=\"IKS\">\n\n** Creates a Deployment **\n```\nkubectl apply -f <deploymentYAML>\n```\n** Get the deployment **\n```\nkubectl get deployment my-deployment\n```\n** Describe the deployment **\n```\nkubectl describe deployment my-deployment\n```\n** Edit the deployment **\n```\nkubectl edit deployment my-deployment\n```\n** Scale the deployment **\n```\nkubectl scale deployment/my-deployment --replicas=4\n```\n** Delete the deployment **\n```\nkubectl delete deployment my-deployment\n```\n\n</Tab>\n\n</Tabs>\n\n\n# Deployments rolling updates and rollback\n\n**Updating a Deployment**\nA Deployment’s rollout is triggered if and only if the Deployment’s Pod template (that is, .spec.template) is changed, for example if the labels or container images of the template are updated. Other updates, such as scaling the Deployment, do not trigger a rollout.\n\nEach time a new Deployment is observed by the Deployment controller, a ReplicaSet is created to bring up the desired Pods. If the Deployment is updated, the existing ReplicaSet that controls Pods whose labels match .spec.selector but whose template does not match .spec.template are scaled down. Eventually, the new ReplicaSet is scaled to .spec.replicas and all old ReplicaSets is scaled to 0.\n\n**Label selector updates**\nIt is generally discouraged to make label selector updates and it is suggested to plan your selectors up front. In any case, if you need to perform a label selector update, exercise great caution and make sure you have grasped all of the implications.\n\n\n**Rolling Back a Deployment**\nSometimes, you may want to rollback a Deployment; for example, when the Deployment is not stable, such as crash looping. By default, all of the Deployment’s rollout history is kept in the system so that you can rollback anytime you want (you can change that by modifying revision history limit).\n\nA Deployment’s revision is created when a Deployment’s rollout is triggered. This means that the new revision is created if and only if the Deployment’s Pod template (.spec.template) is changed, for example if you update the labels or container images of the template. Other updates, such as scaling the Deployment, do not create a Deployment revision, so that you can facilitate simultaneous manual- or auto-scaling. This means that when you roll back to an earlier revision, only the Deployment’s Pod template part is rolled back.\n\n## Resources\n\n**OpenShift**\n\n- [Rollouts](https://docs.openshift.com/container-platform/4.3/applications/deployments/what-deployments-are.html#delpoymentconfigs-specific-features_what-deployments-are)\n- [Rolling Back](https://docs.openshift.com/container-platform/4.3/applications/deployments/managing-deployment-processes.html#deployments-rolling-back_deployment-operations)\n\n**IKS**\n\n- [Updating a Deployment](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#updating-a-deployment)\n- [Rolling Back a Deployment](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#rolling-back-a-deployment)\n\n\n## References\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: bitnami/nginx:1.16.0\n        ports:\n        - containerPort: 8080\n```\n\n<Tabs>\n<Tab label=\"OpenShift\">\n\n** Creates a Deployment **\n```\noc apply -f deployment.yaml\n```\n** Get Deployments **\n```\noc get deployments\n```\n** Sets new image for Deployment **\n```\noc set image deployment/my-deployment nginx=bitnami/nginx:1.16.1 --record\n```\n** Check the status of the rollout **\n```\noc rollout status deployment my-deployment\n```\n** Get ReplicaSets **\n```\noc get rs\n```\n** Get Deployment Description **\n```\noc describe deployment my-deployment\n```\n** Get Rollout History **\n```\noc rollout history deployment my-deployment\n```\n** Undo Rollout **\n```\noc rollback my-deployment\n```\n** Delete the deployment **\n```\noc delete deployment my-deployment\n```\n\n</Tab>\n\n<Tab label=\"IKS\">\n\n** Creates a Deployment **\n```\nkubectl apply -f deployment.yaml\n```\n** Get Deployments **\n```\nkubectl get deployments\n```\n** Sets new image for Deployment **\n```\nkubectl set image deployment/my-deployment nginx=bitnami/nginx:1.16.1 --record\n```\n** Check the status of the rollout **\n```\nkubectl rollout status deployment my-deployment\n```\n** Get ReplicaSets **\n```\nkubectl get rs\n```\n** Get Deployment Description **\n```\nkubectl describe deployment my-deployment\n```\n** Get Rollout History **\n```\nkubectl rollout history deployment my-deployment\n```\n** Undo Rollout **\n```\nkubectl rollout undo deployment my-deployment\n```\n** Delete the deployment **\n```\nkubectl delete deployment my-deployment\n```\n\n</Tab>\n\n</Tabs>\n\n# Jobs and CronJobs\n\n**Jobs**\nA Job creates one or more Pods and ensures that a specified number of them successfully terminate. As pods successfully complete, the Job tracks the successful completions. When a specified number of successful completions is reached, the task (ie, Job) is complete. Deleting a Job will clean up the Pods it created.\n\n\n**CronJobs**\nOne CronJob object is like one line of a crontab (cron table) file. It runs a job periodically on a given schedule, written in Cron format.\n\nAll CronJob schedule: times are based on the timezone of the master where the job is initiated.\n\n## Resources\n\n**OpenShift**\n- [Jobs](https://docs.openshift.com/container-platform/4.3/nodes/jobs/nodes-nodes-jobs.html)\n- [CronJobs](https://docs.openshift.com/container-platform/4.3/nodes/jobs/nodes-nodes-jobs.html#nodes-nodes-jobs-creating-cron_nodes-nodes-jobs)\n\n**IKS**\n- [Jobs to Completion](https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/)\n- [Cron Jobs](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/)\n- [Automated Tasks with Cron](https://kubernetes.io/docs/tasks/job/automated-tasks-with-cron-jobs/)\n\n## References\n\nIt computes π to 2000 places and prints it out\n```yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: pi\nspec:\n  template:\n    spec:\n      containers:\n      - name: pi\n        image: perl\n        command: [\"perl\",  \"-Mbignum=bpi\", \"-wle\", \"print bpi(2000)\"]\n      restartPolicy: Never\n  backoffLimit: 4\n```\n\nRunning in parallel\n```yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: pi\nspec:\n  parallelism: 2\n  completions: 3\n  template:\n    spec:\n      containers:\n        - name: pi\n          image: perl\n          command: [\"perl\", \"-Mbignum=bpi\", \"-wle\", \"print bpi(2000)\"]\n      restartPolicy: Never\n  backoffLimit: 4\n```\n\n```yaml\napiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n  name: hello\nspec:\n  schedule: \"*/1 * * * *\"\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n          - name: hello\n            image: busybox\n            args:\n            - /bin/sh\n            - -c\n            - date; echo Hello from the Kubernetes cluster\n          restartPolicy: OnFailure\n```\n\n<Tabs>\n<Tab label=\"OpenShift\">\n\n** Gets Jobs **\n```\noc get jobs\n```\n** Gets Job Description **\n```\noc describe job pi\n```\n** Gets Pods from the Job **\n```\noc get pods\n```\n** Deletes Job **\n```\noc delete job pi\n```\n\n** Gets CronJob **\n```\noc get cronjobs\n```\n** Describes CronJob **\n```\noc describe cronjobs pi\n```\n** Gets Pods from CronJob **\n```\noc get pods\n```\n** Deletes CronJob **\n```\noc delete cronjobs pi\n```\n\n</Tab>\n\n<Tab label=\"IKS\">\n\n** Gets Jobs **\n```\nkubectl get jobs\n```\n** Gets Job Description **\n```\nkubectl describe job pi\n```\n** Gets Pods from the Job **\n```\nkubectl get pods\n```\n** Deletes Job **\n```\nkubectl delete job pi\n```\n\n** Gets CronJob **\n```\nkubectl get cronjobs\n```\n** Describes CronJob **\n```\nkubectl describe cronjobs pi\n```\n** Gets Pods from CronJob **\n```\nkubectl get pods\n```\n** Deletes CronJob **\n```\nkubectl delete cronjobs pi\n```\n\n</Tab>\n\n</Tabs>\n\n## Activities\n\n| Task                            | Description         | Link        |\n| --------------------------------| ------------------  |:----------- |\n| *** Try It Yourself ***                         |         |         |\n| Rolling Updates Lab | Create a Rolling Update for your application.  | [Rolling Updates](../kube-overview/activities/labs/lab6) |\n| Cron Jobs Lab | Using Tekton to test new versions of applications. | [Crons Jobs](../kube-overview/activities/labs/lab7) |\n\n","type":"Mdx","contentDigest":"a5877571d829d24d95ff200355ad199e","counter":570,"owner":"gatsby-plugin-mdx"},"exports":[],"rawBody":"---\ntitle: Pod Design\ndescription:  Pod Design in Kubernetes\n---\n\n<AnchorLinks small>\n  <AnchorLink>Labels, Selectors, and Annotations</AnchorLink>\n  <AnchorLink>Deployments</AnchorLink>\n  <AnchorLink>Deployments rolling updates and rollback</AnchorLink>\n  <AnchorLink>Jobs and CronJobs</AnchorLink>\n  <AnchorLink>Activities</AnchorLink>\n</AnchorLinks>\n\n# Labels, Selectors, and Annotations\n\nLabels are key/value pairs that are attached to objects, such as pods. Labels are intended to be used to specify identifying attributes of objects that are meaningful and relevant to users, but do not directly imply semantics to the core system. Labels can be used to organize and to select subsets of objects. Labels can be attached to objects at creation time and subsequently added and modified at any time. Each object can have a set of key/value labels defined. Each Key must be unique for a given object.\n\nYou can use Kubernetes annotations to attach arbitrary non-identifying metadata to objects. Clients such as tools and libraries can retrieve this metadata.\n\nYou can use either labels or annotations to attach metadata to Kubernetes objects. Labels can be used to select objects and to find collections of objects that satisfy certain conditions. In contrast, annotations are not used to identify and select objects. The metadata in an annotation can be small or large, structured or unstructured, and can include characters not permitted by labels.\n\n## Resources\n\n**OpenShift**\n- [CLI Label Commands](https://docs.openshift.com/enterprise/3.0/cli_reference/basic_cli_operations.html#application-modification-cli-operations)\n\n**IKS**\n- [Labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)\n- [Annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/)\n\n\n## References\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\n  labels:\n    app: foo\n    tier: frontend\n    env: dev\n  annotations:\n    imageregistry: \"https://hub.docker.com/\"\n    gitrepo: \"https://github.com/csantanapr/knative\"\nspec:\n  containers:\n  - name: app\n    image: bitnami/nginx\n```\n\n\n<Tabs>\n<Tab label=\"OpenShift\">\n\n** Change Labels on Objects **\n```\noc label pod my-pod boot=camp\n```\n **Getting Pods based on their labels.**\n```\noc get pods --show-labels\n```\n```\noc get pods -L tier,env\n```\n```\noc get pods -l app\n```\n```\noc get pods -l tier=frontend\n```\n```\noc get pods -l 'env=dev,tier=frontend'\n```\n```\noc get pods -l 'env in (dev, test)'\n```\n```\noc get pods -l 'tier!=backend'\n```\n```\noc get pods -l 'env,env notin (prod)'\n```\n**Delete the Pod.**\n```\noc delete pod my-pod\n```\n\n</Tab>\n\n<Tab label=\"IKS\">\n\n** Change Labels on Objects **\n```\nkubectl label pod my-pod boot=camp\n```\n **Getting Pods based on their labels.**\n```\nkubectl get pods --show-labels\n```\n```\nkubectl get pods -L tier,env\n```\n```\nkubectl get pods -l app\n```\n```\nkubectl get pods -l tier=frontend\n```\n```\nkubectl get pods -l 'env=dev,tier=frontend'\n```\n```\nkubectl get pods -l 'env in (dev, test)'\n```\n```\nkubectl get pods -l 'tier!=backend'\n```\n```\nkubectl get pods -l 'env,env notin (prod)'\n```\n**Delete the Pod.**\n```\nkubectl delete pod my-pod\n```\n\n</Tab>\n\n</Tabs>\n\n# Deployments\n\nA Deployment provides declarative updates for Pods and ReplicaSets.\n\nYou describe a desired state in a Deployment, and the Deployment Controller changes the actual state to the desired state at a controlled rate. You can define Deployments to create new ReplicaSets, or to remove existing Deployments and adopt all their resources with new Deployments.\n\nThe following are typical use cases for Deployments:\n- Create a Deployment to rollout a ReplicaSet. The ReplicaSet creates Pods in the background. Check the status of the rollout to see if it succeeds or not.\n- Declare the new state of the Pods by updating the PodTemplateSpec of the Deployment. A new ReplicaSet is created and the Deployment manages moving the Pods from the old ReplicaSet to the new one at a controlled rate. Each new ReplicaSet updates the revision of the Deployment.\n- Rollback to an earlier Deployment revision if the current state of the Deployment is not stable. Each rollback updates the revision of the Deployment.\n- Scale up the Deployment to facilitate more load.\n- Pause the Deployment to apply multiple fixes to its PodTemplateSpec and then resume it to start a new rollout.\n- Use the status of the Deployment as an indicator that a rollout has stuck.\n- Clean up older ReplicaSets that you don’t need anymore.\n\n\n## Resources\n\n**OpenShift**\n\n- [Deployments](https://docs.openshift.com/container-platform/4.3/applications/deployments/what-deployments-are.html)\n- [Managing Deployment Processes](https://docs.openshift.com/container-platform/4.3/applications/deployments/managing-deployment-processes.html)\n- [DeploymentConfig Strategies](https://docs.openshift.com/container-platform/4.3/applications/deployments/deployment-strategies.html)\n- [Route Based Deployment Strategies](https://docs.openshift.com/container-platform/4.3/applications/deployments/route-based-deployment-strategies.html)\n\n**IKS**\n\n- [Deployments](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/)\n- [Scaling Deployments](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment)\n\n## References\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: bitnami/nginx:1.16.0\n        ports:\n        - containerPort: 8080\n```\n\n<Tabs>\n<Tab label=\"OpenShift\">\n\n** Creates a Deployment **\n```\noc apply -f deployment.yaml\n```\n** Gets Deployments **\n```\noc get deployment my-deployment\n```\n** Gets the deployments description **\n```\noc describe deployment my-deployment\n```\n** Edit the deployment **\n```\noc edit deployment my-deployment\n```\n** Scale the deployment **\n```\noc scale deployment/my-deployment --replicas=3\n```\n** Delete the deployment **\n```\noc delete deployment my-deployment\n```\n</Tab>\n\n<Tab label=\"IKS\">\n\n** Creates a Deployment **\n```\nkubectl apply -f <deploymentYAML>\n```\n** Get the deployment **\n```\nkubectl get deployment my-deployment\n```\n** Describe the deployment **\n```\nkubectl describe deployment my-deployment\n```\n** Edit the deployment **\n```\nkubectl edit deployment my-deployment\n```\n** Scale the deployment **\n```\nkubectl scale deployment/my-deployment --replicas=4\n```\n** Delete the deployment **\n```\nkubectl delete deployment my-deployment\n```\n\n</Tab>\n\n</Tabs>\n\n\n# Deployments rolling updates and rollback\n\n**Updating a Deployment**\nA Deployment’s rollout is triggered if and only if the Deployment’s Pod template (that is, .spec.template) is changed, for example if the labels or container images of the template are updated. Other updates, such as scaling the Deployment, do not trigger a rollout.\n\nEach time a new Deployment is observed by the Deployment controller, a ReplicaSet is created to bring up the desired Pods. If the Deployment is updated, the existing ReplicaSet that controls Pods whose labels match .spec.selector but whose template does not match .spec.template are scaled down. Eventually, the new ReplicaSet is scaled to .spec.replicas and all old ReplicaSets is scaled to 0.\n\n**Label selector updates**\nIt is generally discouraged to make label selector updates and it is suggested to plan your selectors up front. In any case, if you need to perform a label selector update, exercise great caution and make sure you have grasped all of the implications.\n\n\n**Rolling Back a Deployment**\nSometimes, you may want to rollback a Deployment; for example, when the Deployment is not stable, such as crash looping. By default, all of the Deployment’s rollout history is kept in the system so that you can rollback anytime you want (you can change that by modifying revision history limit).\n\nA Deployment’s revision is created when a Deployment’s rollout is triggered. This means that the new revision is created if and only if the Deployment’s Pod template (.spec.template) is changed, for example if you update the labels or container images of the template. Other updates, such as scaling the Deployment, do not create a Deployment revision, so that you can facilitate simultaneous manual- or auto-scaling. This means that when you roll back to an earlier revision, only the Deployment’s Pod template part is rolled back.\n\n## Resources\n\n**OpenShift**\n\n- [Rollouts](https://docs.openshift.com/container-platform/4.3/applications/deployments/what-deployments-are.html#delpoymentconfigs-specific-features_what-deployments-are)\n- [Rolling Back](https://docs.openshift.com/container-platform/4.3/applications/deployments/managing-deployment-processes.html#deployments-rolling-back_deployment-operations)\n\n**IKS**\n\n- [Updating a Deployment](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#updating-a-deployment)\n- [Rolling Back a Deployment](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#rolling-back-a-deployment)\n\n\n## References\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: bitnami/nginx:1.16.0\n        ports:\n        - containerPort: 8080\n```\n\n<Tabs>\n<Tab label=\"OpenShift\">\n\n** Creates a Deployment **\n```\noc apply -f deployment.yaml\n```\n** Get Deployments **\n```\noc get deployments\n```\n** Sets new image for Deployment **\n```\noc set image deployment/my-deployment nginx=bitnami/nginx:1.16.1 --record\n```\n** Check the status of the rollout **\n```\noc rollout status deployment my-deployment\n```\n** Get ReplicaSets **\n```\noc get rs\n```\n** Get Deployment Description **\n```\noc describe deployment my-deployment\n```\n** Get Rollout History **\n```\noc rollout history deployment my-deployment\n```\n** Undo Rollout **\n```\noc rollback my-deployment\n```\n** Delete the deployment **\n```\noc delete deployment my-deployment\n```\n\n</Tab>\n\n<Tab label=\"IKS\">\n\n** Creates a Deployment **\n```\nkubectl apply -f deployment.yaml\n```\n** Get Deployments **\n```\nkubectl get deployments\n```\n** Sets new image for Deployment **\n```\nkubectl set image deployment/my-deployment nginx=bitnami/nginx:1.16.1 --record\n```\n** Check the status of the rollout **\n```\nkubectl rollout status deployment my-deployment\n```\n** Get ReplicaSets **\n```\nkubectl get rs\n```\n** Get Deployment Description **\n```\nkubectl describe deployment my-deployment\n```\n** Get Rollout History **\n```\nkubectl rollout history deployment my-deployment\n```\n** Undo Rollout **\n```\nkubectl rollout undo deployment my-deployment\n```\n** Delete the deployment **\n```\nkubectl delete deployment my-deployment\n```\n\n</Tab>\n\n</Tabs>\n\n# Jobs and CronJobs\n\n**Jobs**\nA Job creates one or more Pods and ensures that a specified number of them successfully terminate. As pods successfully complete, the Job tracks the successful completions. When a specified number of successful completions is reached, the task (ie, Job) is complete. Deleting a Job will clean up the Pods it created.\n\n\n**CronJobs**\nOne CronJob object is like one line of a crontab (cron table) file. It runs a job periodically on a given schedule, written in Cron format.\n\nAll CronJob schedule: times are based on the timezone of the master where the job is initiated.\n\n## Resources\n\n**OpenShift**\n- [Jobs](https://docs.openshift.com/container-platform/4.3/nodes/jobs/nodes-nodes-jobs.html)\n- [CronJobs](https://docs.openshift.com/container-platform/4.3/nodes/jobs/nodes-nodes-jobs.html#nodes-nodes-jobs-creating-cron_nodes-nodes-jobs)\n\n**IKS**\n- [Jobs to Completion](https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/)\n- [Cron Jobs](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/)\n- [Automated Tasks with Cron](https://kubernetes.io/docs/tasks/job/automated-tasks-with-cron-jobs/)\n\n## References\n\nIt computes π to 2000 places and prints it out\n```yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: pi\nspec:\n  template:\n    spec:\n      containers:\n      - name: pi\n        image: perl\n        command: [\"perl\",  \"-Mbignum=bpi\", \"-wle\", \"print bpi(2000)\"]\n      restartPolicy: Never\n  backoffLimit: 4\n```\n\nRunning in parallel\n```yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: pi\nspec:\n  parallelism: 2\n  completions: 3\n  template:\n    spec:\n      containers:\n        - name: pi\n          image: perl\n          command: [\"perl\", \"-Mbignum=bpi\", \"-wle\", \"print bpi(2000)\"]\n      restartPolicy: Never\n  backoffLimit: 4\n```\n\n```yaml\napiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n  name: hello\nspec:\n  schedule: \"*/1 * * * *\"\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n          - name: hello\n            image: busybox\n            args:\n            - /bin/sh\n            - -c\n            - date; echo Hello from the Kubernetes cluster\n          restartPolicy: OnFailure\n```\n\n<Tabs>\n<Tab label=\"OpenShift\">\n\n** Gets Jobs **\n```\noc get jobs\n```\n** Gets Job Description **\n```\noc describe job pi\n```\n** Gets Pods from the Job **\n```\noc get pods\n```\n** Deletes Job **\n```\noc delete job pi\n```\n\n** Gets CronJob **\n```\noc get cronjobs\n```\n** Describes CronJob **\n```\noc describe cronjobs pi\n```\n** Gets Pods from CronJob **\n```\noc get pods\n```\n** Deletes CronJob **\n```\noc delete cronjobs pi\n```\n\n</Tab>\n\n<Tab label=\"IKS\">\n\n** Gets Jobs **\n```\nkubectl get jobs\n```\n** Gets Job Description **\n```\nkubectl describe job pi\n```\n** Gets Pods from the Job **\n```\nkubectl get pods\n```\n** Deletes Job **\n```\nkubectl delete job pi\n```\n\n** Gets CronJob **\n```\nkubectl get cronjobs\n```\n** Describes CronJob **\n```\nkubectl describe cronjobs pi\n```\n** Gets Pods from CronJob **\n```\nkubectl get pods\n```\n** Deletes CronJob **\n```\nkubectl delete cronjobs pi\n```\n\n</Tab>\n\n</Tabs>\n\n## Activities\n\n| Task                            | Description         | Link        |\n| --------------------------------| ------------------  |:----------- |\n| *** Try It Yourself ***                         |         |         |\n| Rolling Updates Lab | Create a Rolling Update for your application.  | [Rolling Updates](../kube-overview/activities/labs/lab6) |\n| Cron Jobs Lab | Using Tekton to test new versions of applications. | [Crons Jobs](../kube-overview/activities/labs/lab7) |\n\n","frontmatter":{"title":"Pod Design","description":"Pod Design in Kubernetes"},"fileAbsolutePath":"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/src/pages/lectures/kube-pod-design/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550"]}