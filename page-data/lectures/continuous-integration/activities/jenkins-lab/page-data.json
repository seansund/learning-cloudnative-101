{"componentChunkName":"component---src-pages-lectures-continuous-integration-activities-jenkins-lab-mdx","path":"/lectures/continuous-integration/activities/jenkins-lab/","result":{"pageContext":{"frontmatter":{"title":"Jenkins Lab","description":"Lab for continuous integration using Jenkins"},"relativePagePath":"/lectures/continuous-integration/activities/jenkins-lab.mdx","titleType":"page","MdxNode":{"id":"1f5db6d7-076a-5598-b515-6e5fbfb55dd2","children":[],"parent":"5b094b20-68e9-53da-8204-935fe79ae389","internal":{"content":"---\ntitle: Jenkins Lab\ndescription: Lab for continuous integration using Jenkins\n---\n\n<Tabs>\n\n<Tab label=\"OpenShift\">\n\n## Introduction\n\nIn this lab, you will learn about how to define Continuous Integration for your application. We are using [Jenkins](https://jenkins.io/) to define it.\n\n**Jenkins**\n\nJenkins is a popular open source Continuous Integration tool. It is built in Java. It allows the developers to perform continuous integration and build automation. It allows you to define steps and executes them based on the instructions like building the application using build tools like Ant, Gradle, Maven etc, executing shell scripts, running tests etc. All the steps can be executed based on the timing or event. It depends on the setup. It helps to monitor all these steps and sends notifications to the team members in case of failures. Also, it is very flexible and has a large plugin list which one easily add based on their requirements.\n\nCheck these guides out if you want to know more about Jenkins - [Jenkins](https://jenkins.io/doc/), Leading open source automation server.\n\n## Prerequisites\n\n- You need an [IBM cloud account](https://cloud.ibm.com/login).\n- Create kubernetes cluster using [IBM Cloud Kubernetes Service](https://cloud.ibm.com/docs/containers?topic=containers-getting-started). Here, you can choose an openshift cluster.\n- Install [oc](https://www.okd.io/download.html) command line tool.\n- You should be familiar with basics like Containers, Docker, Kubernetes.\n\n## Continuous Integration\n\n### Install Jenkins\n\n- Open the IBM Cloud Openshift cluster.\n\n![OC Cluster](../images/ibmcloud_oc_cluster.png)\n\n- Click on the `OpenShift web console` tab and this will take you to openshift UI.\n\n![OC Cluster](../images/openshift_console.png)\n\n- Create a new project.\n\n![OC Cluster](../images/create_project_oc.png)\n\n- Search for `Jenkins`.\n\n![Search Jenkins](../images/search_jenkins.png)\n\n- Choose `Jenkins (Ephemeral)`.\n\n![OC Cluster](../images/Jenkins_ephemeral.png)\n\n- Install it.\n\n![OC Cluster](../images/Jenkins_ephemeral_details_one.png)\n\n![OC Cluster](../images/Jenkins_ephemeral_details_two.png)\n\n![OC Cluster](../images/Jenkins_ephemeral_details_three.png)\n\n- Wait till the Jenkins installs and the pods are ready.\n\n![OC Cluster](../images/Jenkins_oc_url.png)\n\n- Once, it is ready you can access the Jenkins by clicking the link.\n\n![OC Cluster](../images/Jenkins_oc_login.png)\n\nNow, click on `Log in with OpenShift`.\n\n- When you gets logged in, you will see the below screen. Click `Allow selected permissions`.\n\n![OC Cluster](../images/Jenkins_oc_permissions.png)\n\n- You will be able to access the Jenkins UI now.\n\n![OC Cluster](../images/Jenkins_oc_ui.png)\n\n### Get the Sample App\n\n- Fork the below repository.\n\n```bash\nhttps://github.com/ibm-cloud-architecture/cloudnative_sample_app\n```\n\n- Clone the forked repository.\n\n```bash\n$ git clone https://github.com/(user)/cloudnative_sample_app.git\n```\n\n### Jenkinsfile\n\nBefore setting up the CI pipeline, let us first have a look at our Jenkinsfile and understand the stages here.\n\nOpen your Jenkinsfile or you can also access it https://github.com/ibm-cloud-architecture/cloudnative_sample_app/blob/master/Jenkinsfile[here].\n\nIn our Jenkins file, we have five stages.\n\n- *Local - Build*\n\nIn this stage, we are building the application and packaging it using maven.\n\n- *Local - Test*\n\nIn this stage, we are making all the unit tests are running fine by running maven test.\n\n- *Local - Run*\n\nIn this stage, we are running the application using the previous build and verifying the application performing health and api checks.\n\n- *Build and Push Image*\n\n  * We are logging in to the IBM Cloud and accessing the IBM Cloud Container Registry.\n  * We are also creating a namespace if not present.\n  * We are building the image using ibmcloud cli tools.\n  * Once the image is built, it is pushed into the container registry.\n\nIn this stage, we are building the docker image and pushing it to the registry.\n\n- *Push to Deploy repo*\n\n  * Initially, we are cloning the deploy repository.\n  * Changing the image tag to the one we previously built and pushed.\n  * Pushing this new changes to the deploy repository.\n\nIn this stage, we are pushing the new artifact tag to the deploy repository which will later be used by the Continuous Delivery system.\n\n### Jenkins Credentials\n\nLet us now build all the credentials required by the pipeline.\n\n- In the Jenkins home page, click on `Credentials`.\n\n![OC Cluster](../images/Jenkins_Credentials.png)\n\n- In the Credentials page, click on `Jenkins`.\n\n![OC Cluster](../images/Jenkins_creds_global.png)\n\n- Now, click on `Global Credentials (UnRestricted)`.\n\n![OC Cluster](../images/Jenkins_global_cred_creation.png)\n\n- Click on `Add Credentials` to create the ones required for this lab.\n\nimage::Jenkins_add_creds.png[align=\"center\"]\n![OC Cluster](../images/Jenkins_add_creds.png)\n\n- Now create a secrets as follows.\n\nKind : Secret Text\nSecret: (Your container registry url, for eg., us.icr.io)\nID: registry_url\n\n![OC Cluster](../images/Jenkins_secret_creation.png)\n\nOnce created, you will see something like below.\n\n![OC Cluster](../images/Jenkins_secrets.png)\n\nSimilarly create the rest of the credentials as well.\n\n----\nKind : Secret Text\nSecret: (Your registry namespace, for eg., catalyst_cloudnative)\nID: registry_namespace\n\nKind : Secret Text\nSecret: (Your IBM cloud region, for eg., us-east)\nID: ibm_cloud_region\n\nKind : Secret Text\nSecret: (Your IBM Cloud API key)\nID: ibm_cloud_api_key\n\nKind : Secret Text\nSecret: (Your Github Username)\nID: git-account\n\nKind : Secret Text\nSecret: (Your Github Token)\nID: github-token\n----\n\nOnce all of them are created, you will have the list as follows.\n\n![OC Cluster](../images/Jenkins_all_secrets.png)\n\n### Jenkins Pipeline\n\n- Create a new pieline. Go to Jenkins ) Click on `New Item`.\n\n![OC Cluster](../images/Jenkins_pipeline_creation.png)\n\n- Enter the name of the application, choose `Pipeline` and click `OK`.\n\n![OC Cluster](../images/Jenkins_pipeline_app_details.png)\n\n- Now go to the `Pipeline` tab and enter the details of the repository.\n\n  * In the Definition, choose `Pipeline script from SCM`.\n  * Mention SCM as `Git`.\n  * Enter the repository URL in `Repository URL`.\n  * Specify `master` as the branch to build.\n  * `Save` this information.\n\n![OC Cluster](../images/Jenkins_Pipeline_setup.png)\n\n- To initiate a build, click `Build Now`.\n\n![OC Cluster](../images/Jenkins_Pipeline_BuildNow.png)\n\n- Once the build is successful, you will see something like below.\n\n![OC Cluster](../images/Jenkins_Pipeline_Build.png)\n\nAfter this build is done, your deploy repository will be updated by the Jenkins.\n\n![OC Cluster](../images/Jenkins_modify_deploy_repo.png)\n\n</Tab>\n\n<Tab label=\"IKS\">\n\n## Introduction\n\nIn this lab, you will learn about how to define Continuous Integration for your application. We are using https://jenkins.io/[Jenkins] to define it.\n\n**Jenkins**\n\nJenkins is a popular open source Continuous Integration tool. It is built in Java. It allows the developers to perform continuous integration and build automation. It allows you to define steps and executes them based on the instructions like building the application using build tools like Ant, Gradle, Maven etc, executing shell scripts, running tests etc. All the steps can be executed based on the timing or event. It depends on the setup. It helps to monitor all these steps and sends notifications to the team members in case of failures. Also, it is very flexible and has a large plugin list which one easily add based on their requirements.\n\nCheck these guides out if you want to know more about Jenkins - https://jenkins.io/doc/[Jenkins, Leading open source automation server].\n\n## Prerequisites\n\n- You need an https://cloud.ibm.com/login[IBM cloud account].\n- Create kubernetes cluster using https://cloud.ibm.com/docs/containers?topic=containers-getting-started[IBM Cloud Kubernetes Service]. Here, you can choose a kubernetes cluster.\n- Install https://kubernetes.io/docs/tasks/tools/install-kubectl/[kubectl] command line tool.\n- You should be familiar with basics like Containers, Docker, Kubernetes.\n\n## Continuous Integration\n\n### Install Jenkins\n\n- Initially log in into your ibm cloud account as follows.\n\n```bash\n$ ibmcloud login -a cloud.ibm.com -r (region) -g (cluster_name)\n```\n\nAnd then download the Kube config files as below.\n\n```bash\n$ ibmcloud ks cluster-config --cluster (cluster_name)\n```\n\nYou can also get the `access` instructions in `IBM Cloud Dashboard -> Kubernetes Clusters -> Click on your Cluster -> Click on Access Tab`.\n\n- Install Jenkins using helm using the below command. We are not using persistence in this lab.\n\n```bash\n$ helm install --name cloudnative-jenkins --set persistence.enabled=false stable/jenkins\n```\n\nIf it is successfully executed, you will see something like below.\n\n```bash\n$ helm install --name cloudnative-jenkins --set persistence.enabled=false stable/jenkins\nNAME:   cloudnative\nLAST DEPLOYED: Wed Aug  7 16:22:55 2019\nNAMESPACE: default\nSTATUS: DEPLOYED\n\nRESOURCES:\n==> v1/ConfigMap\nNAME                       DATA  AGE\ncloudnative-jenkins        5     1s\ncloudnative-jenkins-tests  1     1s\n\n==> v1/Deployment\nNAME                 READY  UP-TO-DATE  AVAILABLE  AGE\ncloudnative-jenkins  0/1    1           0          1s\n\n==> v1/Pod(related)\nNAME                                  READY  STATUS    RESTARTS  AGE\ncloudnative-jenkins-57588c86c7-hxqmq  0/1    Init:0/1  0         0s\n\n==> v1/Role\nNAME                                 AGE\ncloudnative-jenkins-schedule-agents  1s\n\n==> v1/RoleBinding\nNAME                                 AGE\ncloudnative-jenkins-schedule-agents  1s\n\n==> v1/Secret\nNAME                 TYPE    DATA  AGE\ncloudnative-jenkins  Opaque  2     1s\n\n==> v1/Service\nNAME                       TYPE          CLUSTER-IP      EXTERNAL-IP     PORT(S)         AGE\ncloudnative-jenkins        LoadBalancer  172.21.143.35   169.63.132.124  8080:32172/TCP  1s\ncloudnative-jenkins-agent  ClusterIP     172.21.206.235  (none>          50000/TCP       1s\n\n==> v1/ServiceAccount\nNAME                 SECRETS  AGE\ncloudnative-jenkins  1        1s\n```\n\nUse the following steps to open Jenkins UI and login.\n\n```\nNOTES:\n1. Get your 'admin' user password by running:\n  printf $(kubectl get secret --namespace default cloudnative-jenkins -o jsonpath=\"{.data.jenkins-admin-password}\" | base64 --decode);echo\n2. Get the Jenkins URL to visit by running these commands in the same shell:\n  NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n        You can watch the status of by running 'kubectl get svc --namespace default -w cloudnative-jenkins'\n  export SERVICE_IP=$(kubectl get svc --namespace default cloudnative-jenkins --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{ . }}{{ end }}\")\n  echo http://$SERVICE_IP:8080/login\n\n3. Login with the password from step 1 and the username: admin\n\n\nFor more information on running Jenkins on Kubernetes, visit:\nhttps://cloud.google.com/solutions/jenkins-on-container-engine\n#################################################################################\n######   WARNING: Persistence is disabled!!! You will lose your data when   #####\n######            the Jenkins pod is terminated.                            #####\n#################################################################################\n\n```\n\nTo get the url, run the below commands.\n\n```bash\n$ export SERVICE_IP=$(kubectl get svc --namespace default cloudnative-jenkins --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{ . }}{{ end }}\")\n$ echo http://$SERVICE_IP:8080/login\n```\n\nOnce executed, you will see something like below.\n\n```bash\n$ echo http://$SERVICE_IP:8080/login\nhttp://169.63.132.124:8080/login\n```\n\n- Now, let us login into the Jenkins.\n\n![OC Cluster](../images/Jenkins_ephemeral_details_two.png)\n\nThe user name will be `admin` and to get the password, run the below command.\n\n```bash\n$ printf $(kubectl get secret --namespace default cloudnative-jenkins -o jsonpath=\"{.data.jenkins-admin-password}\" | base64 --decode);echo\n```\n\nIt returns you the password as follows.\n\n```bash\n$ printf $(kubectl get secret --namespace default cloudnative-jenkins -o jsonpath=\"{.data.jenkins-admin-password}\" | base64 --decode);echo\npassword\n```\n\n- Once, successfully logged in you will see the Jenkins home page which is as follows.\n\n![OC Cluster](../images/Jenkins_IKS_home.png)\n\n### Get the Sample App\n\n- Fork the below repository.\n\n    https://github.com/ibm-cloud-architecture/cloudnative_sample_app\n\n\n- Clone the forked repository.\n\n```bash\n$ git clone https://github.com/(user)/cloudnative_sample_app.git\n```\n\n### Jenkinsfile\n\nBefore setting up the CI pipeline, let us first have a look at our Jenkinsfile and understand the stages here.\n\nOpen your Jenkinsfile or you can also access it https://github.com/ibm-cloud-architecture/cloudnative_sample_app/blob/master/Jenkinsfile[here].\n\nIn our Jenkins file, we have five stages.\n\n- *Local - Build*\n\nIn this stage, we are building the application and packaging it using maven.\n\n- *Local - Test*\n\nIn this stage, we are making all the unit tests are running fine by running maven test.\n\n- *Local - Run*\n\nIn this stage, we are running the application using the previous build and verifying the application performing health and api checks.\n\n- *Build and Push Image*\n\n  * We are logging in to the IBM Cloud and accessing the IBM Cloud Container Registry.\n  * We are also creating a namespace if not present.\n  * We are building the image using ibmcloud cli tools.\n  * Once the image is built, it is pushed into the container registry.\n\nIn this stage, we are building the docker image and pushing it to the registry.\n\n- *Push to Deploy repo*\n\n  * Initially, we are cloning the deploy repository.\n  * Changing the image tag to the one we previously built and pushed.\n  * Pushing this new changes to the deploy repository.\n\nIn this stage, we are pushing the new artifact tag to the deploy repository which will later be used by the Continuous Delivery system.\n\n### Jenkins Credentials\n\nLet us now build all the credentials required by the pipeline.\n\n- In the Jenkins home page, click on `Credentials`.\n\n![OC Cluster](../images/Jenkins_IKS_credentials.png)\n\n- In the Credentials page, click on `Jenkins`.\n\n![OC Cluster](../images/Jenkins_creds_global.png)\n\n- Now, click on `Global Credentials (UnRestricted)`.\n\n![OC Cluster](../images/Jenkins_global_cred_creation.png)\n\n- Click on `Add Credentials` to create the ones required for this lab.\n\n![OC Cluster](../images/Jenkins_add_creds.png)\n\n- Now create a secrets as follows.\n\n----\nKind : Secret Text\nSecret: Your container registry url, for eg., us.icr.io\nID: registry_url\n----\n\n![OC Cluster](../images/Jenkins_secret_creation.png)\n\nOnce created, you will see something like below.\n\n![OC Cluster](../images/Jenkins_secrets.png)\n\nSimilarly create the rest of the credentials as well.\n\n----\nKind : Secret Text\nSecret: (Your registry namespace, for eg., catalyst_cloudnative)\nID: registry_namespace\n\nKind : Secret Text\nSecret: (Your IBM cloud region, for eg., us-east)\nID: ibm_cloud_region\n\nKind : Secret Text\nSecret: (Your IBM Cloud API key)\nID: ibm_cloud_api_key\n\nKind : Secret Text\nSecret: (Your Github Username)\nID: git-account\n\nKind : Secret Text\nSecret: (Your Github Token)\nID: github-token\n----\n\nOnce all of them are created, you will have the list as follows.\n\n![OC Cluster](../images/Jenkins_all_secrets.png)\n\n### Jenkins Pipeline\n\n- Create a new pieline. Go to Jenkins ) Click on `New Item`.\n\n![OC Cluster](../images/Jenkins_IKS_pipeline_creation.png)\n\n- Enter the name of your application, select `Pipeline` and then click `OK`.\n\n![OC Cluster](../images/Jenkins_IKS_newitem.png)\n\n- In `General`, check `This project is parameterized`. Create a string parameter with name `CLOUD` and Default value `kubernetes`.\n\n![OC Cluster](../images/Jenkins_IKS_parameter.png)\n\n- Now go to the `Pipeline` tab and enter the details of the repository.\n\n  * In the Definition, choose `Pipeline script from SCM`.\n  * Mention SCM as `Git`.\n  * Enter the repository URL in `Repository URL`.\n  * Specify `master` as the branch to build.\n  * `Save` this information.\n\n![OC Cluster](../images/Jenkins_IKS_Pipeline_details.png)\n\n- To initiate a build, click `Build with Parameters`.\n\n![OC Cluster](../images/Jenkins_IKS_Pipeline_BuildNow.png)\n\n- Once the build is successful, you will see something like below.\n\n![OC Cluster](../images/Jenkins_IKS_Pipeline_Build.png)\n\nAfter this build is done, your deploy repository will be updated by the Jenkins.\n\n![OC Cluster](../images/Jenkins_modify_deploy_repo.png)\n\n</Tab>\n\n\n\n</Tabs>","type":"Mdx","contentDigest":"1e5a452e962ad961d605d4a4ac938f8c","counter":588,"owner":"gatsby-plugin-mdx"},"exports":[],"rawBody":"---\ntitle: Jenkins Lab\ndescription: Lab for continuous integration using Jenkins\n---\n\n<Tabs>\n\n<Tab label=\"OpenShift\">\n\n## Introduction\n\nIn this lab, you will learn about how to define Continuous Integration for your application. We are using [Jenkins](https://jenkins.io/) to define it.\n\n**Jenkins**\n\nJenkins is a popular open source Continuous Integration tool. It is built in Java. It allows the developers to perform continuous integration and build automation. It allows you to define steps and executes them based on the instructions like building the application using build tools like Ant, Gradle, Maven etc, executing shell scripts, running tests etc. All the steps can be executed based on the timing or event. It depends on the setup. It helps to monitor all these steps and sends notifications to the team members in case of failures. Also, it is very flexible and has a large plugin list which one easily add based on their requirements.\n\nCheck these guides out if you want to know more about Jenkins - [Jenkins](https://jenkins.io/doc/), Leading open source automation server.\n\n## Prerequisites\n\n- You need an [IBM cloud account](https://cloud.ibm.com/login).\n- Create kubernetes cluster using [IBM Cloud Kubernetes Service](https://cloud.ibm.com/docs/containers?topic=containers-getting-started). Here, you can choose an openshift cluster.\n- Install [oc](https://www.okd.io/download.html) command line tool.\n- You should be familiar with basics like Containers, Docker, Kubernetes.\n\n## Continuous Integration\n\n### Install Jenkins\n\n- Open the IBM Cloud Openshift cluster.\n\n![OC Cluster](../images/ibmcloud_oc_cluster.png)\n\n- Click on the `OpenShift web console` tab and this will take you to openshift UI.\n\n![OC Cluster](../images/openshift_console.png)\n\n- Create a new project.\n\n![OC Cluster](../images/create_project_oc.png)\n\n- Search for `Jenkins`.\n\n![Search Jenkins](../images/search_jenkins.png)\n\n- Choose `Jenkins (Ephemeral)`.\n\n![OC Cluster](../images/Jenkins_ephemeral.png)\n\n- Install it.\n\n![OC Cluster](../images/Jenkins_ephemeral_details_one.png)\n\n![OC Cluster](../images/Jenkins_ephemeral_details_two.png)\n\n![OC Cluster](../images/Jenkins_ephemeral_details_three.png)\n\n- Wait till the Jenkins installs and the pods are ready.\n\n![OC Cluster](../images/Jenkins_oc_url.png)\n\n- Once, it is ready you can access the Jenkins by clicking the link.\n\n![OC Cluster](../images/Jenkins_oc_login.png)\n\nNow, click on `Log in with OpenShift`.\n\n- When you gets logged in, you will see the below screen. Click `Allow selected permissions`.\n\n![OC Cluster](../images/Jenkins_oc_permissions.png)\n\n- You will be able to access the Jenkins UI now.\n\n![OC Cluster](../images/Jenkins_oc_ui.png)\n\n### Get the Sample App\n\n- Fork the below repository.\n\n```bash\nhttps://github.com/ibm-cloud-architecture/cloudnative_sample_app\n```\n\n- Clone the forked repository.\n\n```bash\n$ git clone https://github.com/(user)/cloudnative_sample_app.git\n```\n\n### Jenkinsfile\n\nBefore setting up the CI pipeline, let us first have a look at our Jenkinsfile and understand the stages here.\n\nOpen your Jenkinsfile or you can also access it https://github.com/ibm-cloud-architecture/cloudnative_sample_app/blob/master/Jenkinsfile[here].\n\nIn our Jenkins file, we have five stages.\n\n- *Local - Build*\n\nIn this stage, we are building the application and packaging it using maven.\n\n- *Local - Test*\n\nIn this stage, we are making all the unit tests are running fine by running maven test.\n\n- *Local - Run*\n\nIn this stage, we are running the application using the previous build and verifying the application performing health and api checks.\n\n- *Build and Push Image*\n\n  * We are logging in to the IBM Cloud and accessing the IBM Cloud Container Registry.\n  * We are also creating a namespace if not present.\n  * We are building the image using ibmcloud cli tools.\n  * Once the image is built, it is pushed into the container registry.\n\nIn this stage, we are building the docker image and pushing it to the registry.\n\n- *Push to Deploy repo*\n\n  * Initially, we are cloning the deploy repository.\n  * Changing the image tag to the one we previously built and pushed.\n  * Pushing this new changes to the deploy repository.\n\nIn this stage, we are pushing the new artifact tag to the deploy repository which will later be used by the Continuous Delivery system.\n\n### Jenkins Credentials\n\nLet us now build all the credentials required by the pipeline.\n\n- In the Jenkins home page, click on `Credentials`.\n\n![OC Cluster](../images/Jenkins_Credentials.png)\n\n- In the Credentials page, click on `Jenkins`.\n\n![OC Cluster](../images/Jenkins_creds_global.png)\n\n- Now, click on `Global Credentials (UnRestricted)`.\n\n![OC Cluster](../images/Jenkins_global_cred_creation.png)\n\n- Click on `Add Credentials` to create the ones required for this lab.\n\nimage::Jenkins_add_creds.png[align=\"center\"]\n![OC Cluster](../images/Jenkins_add_creds.png)\n\n- Now create a secrets as follows.\n\nKind : Secret Text\nSecret: (Your container registry url, for eg., us.icr.io)\nID: registry_url\n\n![OC Cluster](../images/Jenkins_secret_creation.png)\n\nOnce created, you will see something like below.\n\n![OC Cluster](../images/Jenkins_secrets.png)\n\nSimilarly create the rest of the credentials as well.\n\n----\nKind : Secret Text\nSecret: (Your registry namespace, for eg., catalyst_cloudnative)\nID: registry_namespace\n\nKind : Secret Text\nSecret: (Your IBM cloud region, for eg., us-east)\nID: ibm_cloud_region\n\nKind : Secret Text\nSecret: (Your IBM Cloud API key)\nID: ibm_cloud_api_key\n\nKind : Secret Text\nSecret: (Your Github Username)\nID: git-account\n\nKind : Secret Text\nSecret: (Your Github Token)\nID: github-token\n----\n\nOnce all of them are created, you will have the list as follows.\n\n![OC Cluster](../images/Jenkins_all_secrets.png)\n\n### Jenkins Pipeline\n\n- Create a new pieline. Go to Jenkins ) Click on `New Item`.\n\n![OC Cluster](../images/Jenkins_pipeline_creation.png)\n\n- Enter the name of the application, choose `Pipeline` and click `OK`.\n\n![OC Cluster](../images/Jenkins_pipeline_app_details.png)\n\n- Now go to the `Pipeline` tab and enter the details of the repository.\n\n  * In the Definition, choose `Pipeline script from SCM`.\n  * Mention SCM as `Git`.\n  * Enter the repository URL in `Repository URL`.\n  * Specify `master` as the branch to build.\n  * `Save` this information.\n\n![OC Cluster](../images/Jenkins_Pipeline_setup.png)\n\n- To initiate a build, click `Build Now`.\n\n![OC Cluster](../images/Jenkins_Pipeline_BuildNow.png)\n\n- Once the build is successful, you will see something like below.\n\n![OC Cluster](../images/Jenkins_Pipeline_Build.png)\n\nAfter this build is done, your deploy repository will be updated by the Jenkins.\n\n![OC Cluster](../images/Jenkins_modify_deploy_repo.png)\n\n</Tab>\n\n<Tab label=\"IKS\">\n\n## Introduction\n\nIn this lab, you will learn about how to define Continuous Integration for your application. We are using https://jenkins.io/[Jenkins] to define it.\n\n**Jenkins**\n\nJenkins is a popular open source Continuous Integration tool. It is built in Java. It allows the developers to perform continuous integration and build automation. It allows you to define steps and executes them based on the instructions like building the application using build tools like Ant, Gradle, Maven etc, executing shell scripts, running tests etc. All the steps can be executed based on the timing or event. It depends on the setup. It helps to monitor all these steps and sends notifications to the team members in case of failures. Also, it is very flexible and has a large plugin list which one easily add based on their requirements.\n\nCheck these guides out if you want to know more about Jenkins - https://jenkins.io/doc/[Jenkins, Leading open source automation server].\n\n## Prerequisites\n\n- You need an https://cloud.ibm.com/login[IBM cloud account].\n- Create kubernetes cluster using https://cloud.ibm.com/docs/containers?topic=containers-getting-started[IBM Cloud Kubernetes Service]. Here, you can choose a kubernetes cluster.\n- Install https://kubernetes.io/docs/tasks/tools/install-kubectl/[kubectl] command line tool.\n- You should be familiar with basics like Containers, Docker, Kubernetes.\n\n## Continuous Integration\n\n### Install Jenkins\n\n- Initially log in into your ibm cloud account as follows.\n\n```bash\n$ ibmcloud login -a cloud.ibm.com -r (region) -g (cluster_name)\n```\n\nAnd then download the Kube config files as below.\n\n```bash\n$ ibmcloud ks cluster-config --cluster (cluster_name)\n```\n\nYou can also get the `access` instructions in `IBM Cloud Dashboard -> Kubernetes Clusters -> Click on your Cluster -> Click on Access Tab`.\n\n- Install Jenkins using helm using the below command. We are not using persistence in this lab.\n\n```bash\n$ helm install --name cloudnative-jenkins --set persistence.enabled=false stable/jenkins\n```\n\nIf it is successfully executed, you will see something like below.\n\n```bash\n$ helm install --name cloudnative-jenkins --set persistence.enabled=false stable/jenkins\nNAME:   cloudnative\nLAST DEPLOYED: Wed Aug  7 16:22:55 2019\nNAMESPACE: default\nSTATUS: DEPLOYED\n\nRESOURCES:\n==> v1/ConfigMap\nNAME                       DATA  AGE\ncloudnative-jenkins        5     1s\ncloudnative-jenkins-tests  1     1s\n\n==> v1/Deployment\nNAME                 READY  UP-TO-DATE  AVAILABLE  AGE\ncloudnative-jenkins  0/1    1           0          1s\n\n==> v1/Pod(related)\nNAME                                  READY  STATUS    RESTARTS  AGE\ncloudnative-jenkins-57588c86c7-hxqmq  0/1    Init:0/1  0         0s\n\n==> v1/Role\nNAME                                 AGE\ncloudnative-jenkins-schedule-agents  1s\n\n==> v1/RoleBinding\nNAME                                 AGE\ncloudnative-jenkins-schedule-agents  1s\n\n==> v1/Secret\nNAME                 TYPE    DATA  AGE\ncloudnative-jenkins  Opaque  2     1s\n\n==> v1/Service\nNAME                       TYPE          CLUSTER-IP      EXTERNAL-IP     PORT(S)         AGE\ncloudnative-jenkins        LoadBalancer  172.21.143.35   169.63.132.124  8080:32172/TCP  1s\ncloudnative-jenkins-agent  ClusterIP     172.21.206.235  (none>          50000/TCP       1s\n\n==> v1/ServiceAccount\nNAME                 SECRETS  AGE\ncloudnative-jenkins  1        1s\n```\n\nUse the following steps to open Jenkins UI and login.\n\n```\nNOTES:\n1. Get your 'admin' user password by running:\n  printf $(kubectl get secret --namespace default cloudnative-jenkins -o jsonpath=\"{.data.jenkins-admin-password}\" | base64 --decode);echo\n2. Get the Jenkins URL to visit by running these commands in the same shell:\n  NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n        You can watch the status of by running 'kubectl get svc --namespace default -w cloudnative-jenkins'\n  export SERVICE_IP=$(kubectl get svc --namespace default cloudnative-jenkins --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{ . }}{{ end }}\")\n  echo http://$SERVICE_IP:8080/login\n\n3. Login with the password from step 1 and the username: admin\n\n\nFor more information on running Jenkins on Kubernetes, visit:\nhttps://cloud.google.com/solutions/jenkins-on-container-engine\n#################################################################################\n######   WARNING: Persistence is disabled!!! You will lose your data when   #####\n######            the Jenkins pod is terminated.                            #####\n#################################################################################\n\n```\n\nTo get the url, run the below commands.\n\n```bash\n$ export SERVICE_IP=$(kubectl get svc --namespace default cloudnative-jenkins --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{ . }}{{ end }}\")\n$ echo http://$SERVICE_IP:8080/login\n```\n\nOnce executed, you will see something like below.\n\n```bash\n$ echo http://$SERVICE_IP:8080/login\nhttp://169.63.132.124:8080/login\n```\n\n- Now, let us login into the Jenkins.\n\n![OC Cluster](../images/Jenkins_ephemeral_details_two.png)\n\nThe user name will be `admin` and to get the password, run the below command.\n\n```bash\n$ printf $(kubectl get secret --namespace default cloudnative-jenkins -o jsonpath=\"{.data.jenkins-admin-password}\" | base64 --decode);echo\n```\n\nIt returns you the password as follows.\n\n```bash\n$ printf $(kubectl get secret --namespace default cloudnative-jenkins -o jsonpath=\"{.data.jenkins-admin-password}\" | base64 --decode);echo\npassword\n```\n\n- Once, successfully logged in you will see the Jenkins home page which is as follows.\n\n![OC Cluster](../images/Jenkins_IKS_home.png)\n\n### Get the Sample App\n\n- Fork the below repository.\n\n    https://github.com/ibm-cloud-architecture/cloudnative_sample_app\n\n\n- Clone the forked repository.\n\n```bash\n$ git clone https://github.com/(user)/cloudnative_sample_app.git\n```\n\n### Jenkinsfile\n\nBefore setting up the CI pipeline, let us first have a look at our Jenkinsfile and understand the stages here.\n\nOpen your Jenkinsfile or you can also access it https://github.com/ibm-cloud-architecture/cloudnative_sample_app/blob/master/Jenkinsfile[here].\n\nIn our Jenkins file, we have five stages.\n\n- *Local - Build*\n\nIn this stage, we are building the application and packaging it using maven.\n\n- *Local - Test*\n\nIn this stage, we are making all the unit tests are running fine by running maven test.\n\n- *Local - Run*\n\nIn this stage, we are running the application using the previous build and verifying the application performing health and api checks.\n\n- *Build and Push Image*\n\n  * We are logging in to the IBM Cloud and accessing the IBM Cloud Container Registry.\n  * We are also creating a namespace if not present.\n  * We are building the image using ibmcloud cli tools.\n  * Once the image is built, it is pushed into the container registry.\n\nIn this stage, we are building the docker image and pushing it to the registry.\n\n- *Push to Deploy repo*\n\n  * Initially, we are cloning the deploy repository.\n  * Changing the image tag to the one we previously built and pushed.\n  * Pushing this new changes to the deploy repository.\n\nIn this stage, we are pushing the new artifact tag to the deploy repository which will later be used by the Continuous Delivery system.\n\n### Jenkins Credentials\n\nLet us now build all the credentials required by the pipeline.\n\n- In the Jenkins home page, click on `Credentials`.\n\n![OC Cluster](../images/Jenkins_IKS_credentials.png)\n\n- In the Credentials page, click on `Jenkins`.\n\n![OC Cluster](../images/Jenkins_creds_global.png)\n\n- Now, click on `Global Credentials (UnRestricted)`.\n\n![OC Cluster](../images/Jenkins_global_cred_creation.png)\n\n- Click on `Add Credentials` to create the ones required for this lab.\n\n![OC Cluster](../images/Jenkins_add_creds.png)\n\n- Now create a secrets as follows.\n\n----\nKind : Secret Text\nSecret: Your container registry url, for eg., us.icr.io\nID: registry_url\n----\n\n![OC Cluster](../images/Jenkins_secret_creation.png)\n\nOnce created, you will see something like below.\n\n![OC Cluster](../images/Jenkins_secrets.png)\n\nSimilarly create the rest of the credentials as well.\n\n----\nKind : Secret Text\nSecret: (Your registry namespace, for eg., catalyst_cloudnative)\nID: registry_namespace\n\nKind : Secret Text\nSecret: (Your IBM cloud region, for eg., us-east)\nID: ibm_cloud_region\n\nKind : Secret Text\nSecret: (Your IBM Cloud API key)\nID: ibm_cloud_api_key\n\nKind : Secret Text\nSecret: (Your Github Username)\nID: git-account\n\nKind : Secret Text\nSecret: (Your Github Token)\nID: github-token\n----\n\nOnce all of them are created, you will have the list as follows.\n\n![OC Cluster](../images/Jenkins_all_secrets.png)\n\n### Jenkins Pipeline\n\n- Create a new pieline. Go to Jenkins ) Click on `New Item`.\n\n![OC Cluster](../images/Jenkins_IKS_pipeline_creation.png)\n\n- Enter the name of your application, select `Pipeline` and then click `OK`.\n\n![OC Cluster](../images/Jenkins_IKS_newitem.png)\n\n- In `General`, check `This project is parameterized`. Create a string parameter with name `CLOUD` and Default value `kubernetes`.\n\n![OC Cluster](../images/Jenkins_IKS_parameter.png)\n\n- Now go to the `Pipeline` tab and enter the details of the repository.\n\n  * In the Definition, choose `Pipeline script from SCM`.\n  * Mention SCM as `Git`.\n  * Enter the repository URL in `Repository URL`.\n  * Specify `master` as the branch to build.\n  * `Save` this information.\n\n![OC Cluster](../images/Jenkins_IKS_Pipeline_details.png)\n\n- To initiate a build, click `Build with Parameters`.\n\n![OC Cluster](../images/Jenkins_IKS_Pipeline_BuildNow.png)\n\n- Once the build is successful, you will see something like below.\n\n![OC Cluster](../images/Jenkins_IKS_Pipeline_Build.png)\n\nAfter this build is done, your deploy repository will be updated by the Jenkins.\n\n![OC Cluster](../images/Jenkins_modify_deploy_repo.png)\n\n</Tab>\n\n\n\n</Tabs>","frontmatter":{"title":"Jenkins Lab","description":"Lab for continuous integration using Jenkins"},"fileAbsolutePath":"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/src/pages/lectures/continuous-integration/activities/jenkins-lab.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550"]}