{"version":3,"sources":["webpack:///./src/pages/lectures/kube-overview/activities/labs/solutions/index.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","Accordion","AccordionItem","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","title","parentName","isMDXComponent"],"mappings":"2PAMaA,G,UAAe,IAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,kBAASC,KAGZG,EAAYL,EAAc,aAC1BM,EAAgBN,EAAc,iBAC9BO,EAAc,CAClBR,gBAEIS,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGT,EACF,8BACD,OAAO,YAACM,EAAD,eAAeD,EAAiBL,EAAhC,CAAuCS,WAAYA,EAAYC,QAAQ,cAG5E,mCACA,YAACP,EAAD,CAAWO,QAAQ,aACjB,YAACN,EAAD,CAAeO,MAAM,eAAeD,QAAQ,iBAC1C,uBAAK,gCAAME,WAAW,OAAU,IAA3B,sPAeP,YAACR,EAAD,CAAeO,MAAM,oBAAoBD,QAAQ,iBAC/C,uBAAK,gCAAME,WAAW,OAAU,IAA3B,iCAEL,uBACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,0JASL,uBACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,kHAOL,uBACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,omBA+BP,YAACR,EAAD,CAAeO,MAAM,sBAAsBD,QAAQ,iBACjD,uBAAK,gCAAME,WAAW,OAAU,IAA3B,mYAoBL,uBACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,mcAoBL,uBACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,qNAUL,yCACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,sGAGP,YAACR,EAAD,CAAeO,MAAM,SAASD,QAAQ,iBACpC,uBAAK,gCAAME,WAAW,OAAU,IAA3B,2VAmBP,YAACR,EAAD,CAAeO,MAAM,YAAYD,QAAQ,iBACvC,iCAAgB,0BAAYE,WAAW,KAAvB,UAAhB,yBACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,wCAEL,mEACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,8CAEL,oDACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,0FAEL,gGACL,sBACG,gEACA,+DACA,kEAdA,+EAiBE,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,iGAEL,sCACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,iEAEL,gDACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,sDAEL,kCACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,+DAGP,YAACR,EAAD,CAAeO,MAAM,kBAAkBD,QAAQ,iBAC7C,4EACA,uBAAK,gCAAME,WAAW,OAAU,IAA3B,yFAEL,oEACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,wDAEL,qDACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,0BAEL,4DACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,yDAEL,kDACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,sDAEL,2DACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,yDAGP,YAACR,EAAD,CAAeO,MAAM,YAAYD,QAAQ,iBACvC,uBAAK,gCAAME,WAAW,OAAU,IAA3B,kXAiBL,uBACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,yCAGP,YAACR,EAAD,CAAeO,MAAM,WAAWD,QAAQ,iBACtC,uBAAK,gCAAME,WAAW,OAAU,IAA3B,2MAaL,uBACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,6LAcP,YAACR,EAAD,CAAeO,MAAM,qBAAqBD,QAAQ,iBAChD,uBAAK,gCAAME,WAAW,OAAU,IAA3B,6QAaL,uBACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,0QAaL,uBACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,qgBAsBL,0BAORJ,EAAWK,gBAAiB","file":"component---src-pages-lectures-kube-overview-activities-labs-solutions-index-mdx-c1115e6ce8e8b813aad3.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Accordion = makeShortcode(\"Accordion\");\nconst AccordionItem = makeShortcode(\"AccordionItem\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Solutions`}</h1>\n    <Accordion mdxType=\"Accordion\">\n      <AccordionItem title=\"Pod Creation\" mdxType=\"AccordionItem\">\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\n  namespace: web\nspec:\n  containers:\n    - name: nginx\n      image: nginx\n      command: [\"nginx\"]\n      args: [\"-g\", \"daemon off;\", \"-q\"]\n      ports:\n      - containerPort: 80\n`}</code></pre>\n      </AccordionItem>\n      <AccordionItem title=\"Pod Configuration\" mdxType=\"AccordionItem\">\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl create sa yoda-svc\n`}</code></pre>\n        <hr></hr>\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: yoda-service-config\ndata:\n  yoda.cfg: |-\n    yoda.baby.power=100000000\n    yoda.strength=10\n`}</code></pre>\n        <hr></hr>\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: v1\nkind: Secret\nmetadata:\n  name: yoda-db-password\nstringData:\n  password: 0penSh1ftRul3s!\n`}</code></pre>\n        <hr></hr>\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: v1\nkind: Pod\nmetadata:\n  name: yoda-service\nspec:\n  serviceAccountName: yoda-svc\n  containers:\n  - name: yoda-service\n    image: bitnami/nginx\n    volumeMounts:\n    - name: config-volume\n      mountPath: /etc/yoda-service\n    env:\n    - name: DB_PASSWORD\n      valueFrom:\n        secretKeyRef:\n          name: yoda-db-password\n          key: password\n    resources:\n      requests:\n        memory: \"64Mi\"\n        cpu: \"250m\"\n      limits:\n        memory: \"128Mi\"\n        cpu: \"500m\"\n  volumes:\n  - name: config-volume\n    configMap:\n      name: yoda-service-config\n`}</code></pre>\n      </AccordionItem>\n      <AccordionItem title=\"Multiple Containers\" mdxType=\"AccordionItem\">\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: vader-service-ambassador-config\ndata:\n  haproxy.cfg: |-\n    global\n        daemon\n        maxconn 256\n\n    defaults\n        mode http\n        timeout connect 5000ms\n        timeout client 50000ms\n        timeout server 50000ms\n\n    listen http-in\n        bind *:80\n        server server1 127.0.0.1:8989 maxconn 32\n`}</code></pre>\n        <hr></hr>\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: v1\nkind: Pod\nmetadata:\n  name: vader-service\nspec:\n  containers:\n    - name: millennium-falcon\n      image: ibmcase/millennium-falcon:1\n    - name: haproxy-ambassador\n      image: haproxy:1.7\n      ports:\n      - containerPort: 80\n      volumeMounts:\n      - name: config-volume\n        mountPath: /usr/local/etc/haproxy\n  volumes:\n  - name: config-volume\n    configMap:\n      name: vader-service-ambassador-config\n`}</code></pre>\n        <hr></hr>\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: v1\nkind: Pod\nmetadata:\n  name: busybox\nspec:\n  containers:\n    - name: myapp-container\n      image: radial/busyboxplus:curl\n      command: ['sh', '-c', 'while true; do sleep 3600; done']\n`}</code></pre>\n        <p>{`   Check it with`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl exec busybox -- curl $(kubectl get pod vader-service -o=jsonpath='{.status.podIP}'):80\n`}</code></pre>\n      </AccordionItem>\n      <AccordionItem title=\"Probes\" mdxType=\"AccordionItem\">\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: v1\nkind: Pod\nmetadata:\n  name: energy-shield-service\nspec:\n  containers:\n  - name: energy-shield\n    image: ibmcase/energy-shield:1\n    livenessProbe:\n      httpGet:\n        path: /healthz\n        port: 8080\n    readinessProbe:\n      httpGet:\n        path: /ready\n        port: 8080\n      initialDelaySeconds: 5\n`}</code></pre>\n      </AccordionItem>\n      <AccordionItem title=\"Debugging\" mdxType=\"AccordionItem\">\n        <p>{`   Check `}<inlineCode parentName=\"p\">{`STATUS`}</inlineCode>{` column for not Ready`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl get pods --all-namespaces\n`}</code></pre>\n        <p>{`   Check the description of the deployment`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl describe deployment hyper-drive\n`}</code></pre>\n        <p>{`   Save logs for broken pod`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl logs <pod name> -n <namespace> > /home/cloud_user/debug/broken-pod-logs.log\n`}</code></pre>\n        <p>{`   In the deploymentâ€™s description you will see the following is wrong:`}</p>\n   <ul>\n      <li>Selector and Label names do not match.</li>\n      <li>The Probe is TCP instead of HTTP Get.</li>\n      <li>The Service Port is 80 instead of 8080.</li>\n   </ul>\n   To fix probe, can't kubectl edit, need to delete and recreate the deployment\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl get deployment <deployment name> -n <namespace> -o yaml --export > hyper-drive.yml\n`}</code></pre>\n        <p>{`   Delete pod`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl delete deployment <deployment name> -n <namespace>\n`}</code></pre>\n        <p>{`   Edit yaml, and apply`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl apply -f hyper-drive.yml -n <namespace>\n`}</code></pre>\n        <p>{`   Verify`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl get deployment <deployment name> -n <namespace>\n`}</code></pre>\n      </AccordionItem>\n      <AccordionItem title=\"Rolling Updates\" mdxType=\"AccordionItem\">\n        <p>{`  Update the deployment to the new version like so:`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl set image deployment/jedi-deployment jedi-ws=bitnamy/nginx:1.18.1 --record\n`}</code></pre>\n        <p>{`  Check the progress of the rolling update:`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl rollout status deployment/jedi-deployment\n`}</code></pre>\n        <p>{`  In another terminal window`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl get pods -w\n`}</code></pre>\n        <p>{`  Get a list of previous revisions.`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl rollout history deployment/jedi-deployment\n`}</code></pre>\n        <p>{`  Undo the last revision.`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl rollout undo deployment/jedi-deployment\n`}</code></pre>\n        <p>{`  Check the status of the rollout.`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl rollout status deployment/jedi-deployment\n`}</code></pre>\n      </AccordionItem>\n      <AccordionItem title=\"Cron Jobs\" mdxType=\"AccordionItem\">\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n  name: xwing-cronjob\nspec:\n  schedule: \"*/1 * * * *\"\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n          - name: xwing-status\n            image: ibmcase/xwing-status:1.0\n            args:\n            - /usr/sbin/xwing-status.sh\n          restartPolicy: OnFailure\n`}</code></pre>\n        <hr></hr>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl get cronjob xwing-cronjob\n`}</code></pre>\n      </AccordionItem>\n      <AccordionItem title=\"Services\" mdxType=\"AccordionItem\">\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: v1\nkind: Service\nmetadata:\n    name: jedi-svc\nspec:\n    type: NodePort\n    selector:\n      app: jedi\n    ports:\n    - protocol: TCP\n        port: 80\n        targetPort: 8080\n`}</code></pre>\n        <hr></hr>\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: v1\nkind: Service\nmetadata:\n  name: yoda-svc\nspec:\n  type: ClusterIP\n  selector:\n    app: yoda\n  ports:\n  - protocol: TCP\n      port: 80\n      targetPort: 8080\n`}</code></pre>\n      </AccordionItem>\n      <AccordionItem title=\"Persistent Volumes\" mdxType=\"AccordionItem\">\n        <pre><code parentName=\"pre\" {...{}}>{`    apiVersion: v1\n    kind: PersistentVolume\n    metadata:\n      name: postgresql-pv\n    spec:\n      storageClassName: localdisk\n      capacity:\n        storage: 1Gi\n      accessModes:\n        - ReadWriteOnce\n      hostPath:\n        path: \"/mnt/data\"\n`}</code></pre>\n        <hr></hr>\n        <pre><code parentName=\"pre\" {...{}}>{`    apiVersion: v1\n    kind: PersistentVolumeClaim\n    metadata:\n      name: postgresql-pv-claim\n    spec:\n      storageClassName: localdisk\n      accessModes:\n        - ReadWriteOnce\n      resources:\n        requests:\n          storage: 500Mi\n    \n`}</code></pre>\n        <hr></hr>\n        <pre><code parentName=\"pre\" {...{}}>{`    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: postgresql-pod\n    spec:\n      containers:\n      - name: postgresql\n        image: bitnami/postgresql\n        ports:\n        - containerPort: 5432\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          value: password\n        volumeMounts:\n        - name: sql-storage\n          mountPath: /bitnami/postgresql/\n      volumes:\n      - name: sql-storage\n        persistentVolumeClaim:\n          claimName: postgresql-pv-claim\n    \n`}</code></pre>\n        <hr></hr>\n      </AccordionItem>\n    </Accordion>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}