{"version":3,"sources":["webpack:///./src/pages/electives/eda/activities/labs/lab3/solution.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,IACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iEACA,yDAAwC,0BAAYC,WAAW,KAAvB,SAAxC,aAAuG,kBAAIA,WAAW,KAAI,6BAAGA,WAAW,MAAS,CAC3I,KAAQ,uFAD4G,oBAA1H,gGAGA,yCAAwB,0BAAYA,WAAW,KAAvB,qEAAxB,UACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,81BAcL,yCAAwB,0BAAYA,WAAW,KAAvB,wEAAxB,UACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,o6BAeL,+HAA8G,0BAAYA,WAAW,KAAvB,sBAA9G,8CACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0UAwBL,+DACA,6CAA4B,kBAAIA,WAAW,KAAI,6BAAGA,WAAW,MAAS,CAChE,KAAQ,+DADiC,+BAA/C,gBAE+D,kBAAIA,WAAW,KAAI,6BAAGA,WAAW,MAAS,CACnG,KAAQ,mDADoE,mBAFlF,mKAKA,6BAAY,0BAAYA,WAAW,KAAvB,0BAAZ,sHACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,+/BAsBTJ,EAAWK,gBAAiB","file":"component---src-pages-electives-eda-activities-labs-lab-3-solution-mdx-8ce2ecf017481368a2f6.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`Using Reactive Messaging on OpenLiberty`}</h2>\n    <p>{`Following through the tutorialâ€™s `}<inlineCode parentName=\"p\">{`start`}</inlineCode>{` path via `}<em parentName=\"p\"><a parentName=\"em\" {...{\n          \"href\": \"https://openliberty.io/guides/microprofile-reactive-messaging.html#getting-started\"\n        }}>{`Getting Started`}</a></em>{`, you will be directed through all the necessary steps to build the application as expected.`}</p>\n    <p>{`Contents for the `}<inlineCode parentName=\"p\">{`system/src/main/resources/META-INF/microprofile-config.properties`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-properties\"\n      }}>{`mp.messaging.connector.liberty-kafka.bootstrap.servers=<your-bootstrap-nodes-property-of-your-IBM-Event-Streams-on-Cloud-instance>\n\nmp.messaging.connector.liberty-kafka.security.protocol=SASL_SSL\nmp.messaging.connector.liberty-kafka.ssl.protocol=TLSv1.2\nmp.messaging.connector.liberty-kafka.sasl.mechanism=PLAIN\nmp.messaging.connector.liberty-kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=\"<your-api-key-of-your-IBM-Event-Streams-on-Cloud-instance>\";\n\nmp.messaging.outgoing.systemLoad.connector=liberty-kafka\nmp.messaging.outgoing.systemLoad.topic=systemLoadTopic\nmp.messaging.outgoing.systemLoad.key.serializer=org.apache.kafka.common.serialization.StringSerializer\nmp.messaging.outgoing.systemLoad.value.serializer=io.openliberty.guides.models.SystemLoad$SystemLoadSerializer\n`}</code></pre>\n    <p>{`Contents for the `}<inlineCode parentName=\"p\">{`inventory/src/main/resources/META-INF/microprofile-config.properties`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-properties\"\n      }}>{`mp.messaging.connector.liberty-kafka.bootstrap.servers=<your-bootstrap-nodes-property-of-your-IBM-Event-Streams-on-Cloud-instance>\n\nmp.messaging.connector.liberty-kafka.security.protocol=SASL_SSL\nmp.messaging.connector.liberty-kafka.ssl.protocol=TLSv1.2\nmp.messaging.connector.liberty-kafka.sasl.mechanism=PLAIN\nmp.messaging.connector.liberty-kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=\"<your-api-key-of-your-IBM-Event-Streams-on-Cloud-instance>\";\n\nmp.messaging.incoming.systemLoad.connector=liberty-kafka\nmp.messaging.incoming.systemLoad.topic=systemLoadTopic\nmp.messaging.incoming.systemLoad.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer\nmp.messaging.incoming.systemLoad.value.deserializer=io.openliberty.guides.models.SystemLoad$SystemLoadDeserializer\nmp.messaging.incoming.systemLoad.group.id=system-load-status\n`}</code></pre>\n    <p>{`As the tutorial is built to run Kafka and Zookeeper locally in containers as well, you can replace the `}<inlineCode parentName=\"p\">{`startContainers.sh`}</inlineCode>{` script in the project with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`#!/bin/bash\n\nNETWORK=reactive-app\n\ndocker network create $NETWORK\n\ndocker run -d \\\\\n  -p 9083:9083 \\\\\n  --network=$NETWORK \\\\\n  --name=system \\\\\n  --rm \\\\\n  system:1.0-SNAPSHOT &\n\ndocker run -d \\\\\n  -p 9085:9085 \\\\\n  --network=$NETWORK \\\\\n  --name=inventory \\\\\n  --rm \\\\\n  inventory:1.0-SNAPSHOT &\n\nwait\n`}</code></pre>\n    <h2>{`Using Reactive Messaging with Quarkus`}</h2>\n    <p>{`Following along with `}<em parentName=\"p\"><a parentName=\"em\" {...{\n          \"href\": \"https://quarkus.io/guides/kafka#creating-the-maven-project\"\n        }}>{`Creating the Maven project`}</a></em>{` through the `}<em parentName=\"p\"><a parentName=\"em\" {...{\n          \"href\": \"https://quarkus.io/guides/kafka#get-it-running\"\n        }}>{`Get it running`}</a></em>{` section, you will be walked through the necessary steps to create a simple Quarkus-based project that utilizes the Reactive Messaging feature of MicroProfile.`}</p>\n    <p>{`Your `}<inlineCode parentName=\"p\">{`application.properties`}</inlineCode>{` file will need to contain the necessary security and credential information to configure the connector correctly:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-properties\"\n      }}>{`mp.messaging.connector.smallrye-kafka.bootstrap.servers=<your-bootstrap-nodes-property-of-your-IBM-Event-Streams-on-Cloud-instance>\n\nmp.messaging.connector.smallrye-kafka.security.protocol=SASL_SSL\nmp.messaging.connector.smallrye-kafka.ssl.protocol=TLSv1.2\nmp.messaging.connector.smallrye-kafka.sasl.mechanism=PLAIN\nmp.messaging.connector.smallrye-kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=\"<your-api-key-of-your-IBM-Event-Streams-on-Cloud-instance>\";\n\n# Configure the Kafka sink (we write to it)\nmp.messaging.outgoing.generated-price.connector=smallrye-kafka\nmp.messaging.outgoing.generated-price.topic=prices\nmp.messaging.outgoing.generated-price.value.serializer=org.apache.kafka.common.serialization.IntegerSerializer\n\n# Configure the Kafka source (we read from it)\nmp.messaging.incoming.prices.connector=smallrye-kafka\nmp.messaging.incoming.prices.value.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}